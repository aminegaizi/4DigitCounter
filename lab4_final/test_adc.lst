
test_adc.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         00000018  00800100  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800118  00800118  000011b8  2**0
                  ALLOC
  3 .stab         00002de4  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c7  00000000  00000000  00003f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005463  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005474  2**2
                  CONTENTS, READONLY

Déassemblage de la section .text :

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e0       	ldi	r30, 0x0C	; 12
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 31       	cpi	r26, 0x18	; 24
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e1       	ldi	r26, 0x18	; 24
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 36       	cpi	r26, 0x6F	; 111
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 0c 07 	call	0xe18	; 0xe18 <main>
      c6:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <InitPushButtons>:

//void InitPushButtons()
//This function initializes the IO to read the state of the push buttons
void InitPushButtons()
{
        DDRA = 0x00; //Set all PortA to input
      ce:	1a ba       	out	0x1a, r1	; 26
        DDRB |= 0xF0; //Set PortB pin fom 4 to 7 as output
      d0:	87 b3       	in	r24, 0x17	; 23
      d2:	80 6f       	ori	r24, 0xF0	; 240
      d4:	87 bb       	out	0x17, r24	; 23
        asm("nop"); //IO Synchronization necessary delay
      d6:	00 00       	nop
        asm("nop");
      d8:	00 00       	nop
        PORTA = 0xFF; //Pull up resistor on PORTA input pins
      da:	8f ef       	ldi	r24, 0xFF	; 255
      dc:	8b bb       	out	0x1b, r24	; 27
        PORTB |= (1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6) | (1<<PORTB7); //Enable Tri-State buffer and cutoff Transistor
      de:	88 b3       	in	r24, 0x18	; 24
      e0:	80 6f       	ori	r24, 0xF0	; 240
      e2:	88 bb       	out	0x18, r24	; 24
      e4:	08 95       	ret

000000e6 <spi_init>:
}

void spi_init(void){

	 // Run this code before attempting to write to the LCD.*/
	DDRF  |= 0x08;  //port F bit 3 is enable for LCD
      e6:	e1 e6       	ldi	r30, 0x61	; 97
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24
	asm("nop");
      f0:	00 00       	nop
	asm("nop");
      f2:	00 00       	nop
	PORTF &= 0xF7;  //port F bit 3 is initially low
      f4:	e2 e6       	ldi	r30, 0x62	; 98
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	87 7f       	andi	r24, 0xF7	; 247
      fc:	80 83       	st	Z, r24

        DDRB |= 0b00000111; //Set PB0, PB1 and PB2 as output (resp. SS_N, CLK, MOSI) 
      fe:	87 b3       	in	r24, 0x17	; 23
     100:	87 60       	ori	r24, 0x07	; 7
     102:	87 bb       	out	0x17, r24	; 23
        DDRB &= 0b11110111; //Set PB3 as input (MISO)
     104:	bb 98       	cbi	0x17, 3	; 23
        asm("nop"); //IO sync delay
     106:	00 00       	nop
        asm("nop");
     108:	00 00       	nop

        SPCR   = (1<<SPE) | (1<<MSTR); //master mode, clk low on idle, leading edge sample
     10a:	80 e5       	ldi	r24, 0x50	; 80
     10c:	8d b9       	out	0x0d, r24	; 13
        SPSR   = (1<<SPI2X); //choose double speed operation
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	8e b9       	out	0x0e, r24	; 14
        DDRE   = (1<<PE6) | (1<<PE7); //config PORTE6 and 7 as output
     112:	80 ec       	ldi	r24, 0xC0	; 192
     114:	82 b9       	out	0x02, r24	; 2
        asm("nop"); //IO sync delay
     116:	00 00       	nop
        asm("nop");
     118:	00 00       	nop
        PORTE |= (1<<PORTE6) | (1<<PORTE7); //SH/LD_N to high : no shifting, clkinh high
     11a:	83 b1       	in	r24, 0x03	; 3
     11c:	80 6c       	ori	r24, 0xC0	; 192
     11e:	83 b9       	out	0x03, r24	; 3
     120:	08 95       	ret

00000122 <spi_read>:
 }//spi_init

int spi_read()
{

        PORTE |= (1<<PE6);            //send rising edge to SH/LD_N on HC165
     122:	1e 9a       	sbi	0x03, 6	; 3
        PORTE = 0b10111111;             //send falling edge to  on HC165
     124:	8f eb       	ldi	r24, 0xBF	; 191
     126:	83 b9       	out	0x03, r24	; 3
        PORTE |= (1<<PE6);            //send rising edge to SH/LD_N on HC165
     128:	1e 9a       	sbi	0x03, 6	; 3
        PORTE &= (1<<PE6) | (0<<PE7); //Clk inhibit low, send data through miso
     12a:	83 b1       	in	r24, 0x03	; 3
     12c:	80 74       	andi	r24, 0x40	; 64
     12e:	83 b9       	out	0x03, r24	; 3
        SPDR = 0x00; //reset data value
     130:	1f b8       	out	0x0f, r1	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been received (interrupt flag cleared)
     132:	77 9b       	sbis	0x0e, 7	; 14
     134:	fe cf       	rjmp	.-4      	; 0x132 <spi_read+0x10>
        PORTE |= (1<<PE7);
     136:	1f 9a       	sbi	0x03, 7	; 3
        return SPDR;
     138:	8f b1       	in	r24, 0x0f	; 15
}
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	08 95       	ret

0000013e <spi_write>:
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{

        SPDR = display_count;//send display_count to the display 
     13e:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     140:	77 9b       	sbis	0x0e, 7	; 14
     142:	fe cf       	rjmp	.-4      	; 0x140 <spi_write+0x2>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     144:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     146:	c0 98       	cbi	0x18, 0	; 24
     148:	08 95       	ret

0000014a <TimeProcessing>:
*This function processes the increments in seconds to compute the time past
* Called in Timer 0 RTC interrupt
*/
void TimeProcessing() 
{
  if(dummy_counter == 128)//No prescaler, 128Hz
     14a:	80 91 21 01 	lds	r24, 0x0121
     14e:	80 38       	cpi	r24, 0x80	; 128
     150:	71 f1       	breq	.+92     	; 0x1ae <TimeProcessing+0x64>
  {
    second++;
    dummy_counter = 0;
  }
  if(dummy_counter == 127)
     152:	8f 37       	cpi	r24, 0x7F	; 127
     154:	41 f1       	breq	.+80     	; 0x1a6 <TimeProcessing+0x5c>
  {second_flag = 0;}

  if(dummy_counter == 63)
     156:	8f 33       	cpi	r24, 0x3F	; 63
     158:	c9 f0       	breq	.+50     	; 0x18c <TimeProcessing+0x42>
     15a:	8f 5f       	subi	r24, 0xFF	; 255
  {second_flag = 1;}

  if(second >= 60)
     15c:	90 91 25 01 	lds	r25, 0x0125
     160:	9c 33       	cpi	r25, 0x3C	; 60
     162:	38 f0       	brcs	.+14     	; 0x172 <TimeProcessing+0x28>
  { minute_clk++; 
     164:	90 91 24 01 	lds	r25, 0x0124
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	90 93 24 01 	sts	0x0124, r25
    second = 0;}
     16e:	10 92 25 01 	sts	0x0125, r1
  if(minute_clk == 60)
     172:	90 91 24 01 	lds	r25, 0x0124
     176:	9c 33       	cpi	r25, 0x3C	; 60
     178:	71 f0       	breq	.+28     	; 0x196 <TimeProcessing+0x4c>
  { hour_clk++;
    minute_clk = 0;}
  if(hour_clk == 24)
     17a:	90 91 23 01 	lds	r25, 0x0123
     17e:	98 31       	cpi	r25, 0x18	; 24
     180:	11 f4       	brne	.+4      	; 0x186 <TimeProcessing+0x3c>
  { hour_clk = 0;} 
     182:	10 92 23 01 	sts	0x0123, r1
  dummy_counter++;  
     186:	80 93 21 01 	sts	0x0121, r24
     18a:	08 95       	ret
  }
  if(dummy_counter == 127)
  {second_flag = 0;}

  if(dummy_counter == 63)
  {second_flag = 1;}
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 20 01 	sts	0x0120, r24
     192:	80 e4       	ldi	r24, 0x40	; 64
     194:	e3 cf       	rjmp	.-58     	; 0x15c <TimeProcessing+0x12>

  if(second >= 60)
  { minute_clk++; 
    second = 0;}
  if(minute_clk == 60)
  { hour_clk++;
     196:	90 91 23 01 	lds	r25, 0x0123
     19a:	9f 5f       	subi	r25, 0xFF	; 255
     19c:	90 93 23 01 	sts	0x0123, r25
    minute_clk = 0;}
     1a0:	10 92 24 01 	sts	0x0124, r1
     1a4:	ea cf       	rjmp	.-44     	; 0x17a <TimeProcessing+0x30>
  {
    second++;
    dummy_counter = 0;
  }
  if(dummy_counter == 127)
  {second_flag = 0;}
     1a6:	10 92 20 01 	sts	0x0120, r1
     1aa:	80 e8       	ldi	r24, 0x80	; 128
     1ac:	d7 cf       	rjmp	.-82     	; 0x15c <TimeProcessing+0x12>
*/
void TimeProcessing() 
{
  if(dummy_counter == 128)//No prescaler, 128Hz
  {
    second++;
     1ae:	80 91 25 01 	lds	r24, 0x0125
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	80 93 25 01 	sts	0x0125, r24
    dummy_counter = 0;
     1b8:	10 92 21 01 	sts	0x0121, r1
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	ce cf       	rjmp	.-100    	; 0x15c <TimeProcessing+0x12>

000001c0 <__vector_16>:
//***********************************************************************
//                     ISR for timer counter zero
//***********************************************************************

ISR( TIMER0_OVF_vect ) 
{
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	0b b6       	in	r0, 0x3b	; 59
     1cc:	0f 92       	push	r0
     1ce:	2f 93       	push	r18
     1d0:	3f 93       	push	r19
     1d2:	4f 93       	push	r20
     1d4:	5f 93       	push	r21
     1d6:	6f 93       	push	r22
     1d8:	7f 93       	push	r23
     1da:	8f 93       	push	r24
     1dc:	9f 93       	push	r25
     1de:	af 93       	push	r26
     1e0:	bf 93       	push	r27
     1e2:	ef 93       	push	r30
     1e4:	ff 93       	push	r31
	TimeProcessing();
     1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <TimeProcessing>
	if(snooze)
     1ea:	80 91 1b 01 	lds	r24, 0x011B
     1ee:	88 23       	and	r24, r24
     1f0:	49 f0       	breq	.+18     	; 0x204 <__vector_16+0x44>
		TENsec_counter++; //Count 10 seconds for Snooze
     1f2:	80 91 18 01 	lds	r24, 0x0118
     1f6:	90 91 19 01 	lds	r25, 0x0119
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 19 01 	sts	0x0119, r25
     200:	80 93 18 01 	sts	0x0118, r24
	
	return; 
}
     204:	ff 91       	pop	r31
     206:	ef 91       	pop	r30
     208:	bf 91       	pop	r27
     20a:	af 91       	pop	r26
     20c:	9f 91       	pop	r25
     20e:	8f 91       	pop	r24
     210:	7f 91       	pop	r23
     212:	6f 91       	pop	r22
     214:	5f 91       	pop	r21
     216:	4f 91       	pop	r20
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0b be       	out	0x3b, r0	; 59
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <TIM0_RTC_init>:
//***********************************************************************
//                     Timer 0 RTC mode initialization
//***********************************************************************
void TIM0_RTC_init()
{
	ASSR |= (1<<AS0); //Timer 0 clocked from oscillator clkTOS = 32768Hz
     22a:	80 b7       	in	r24, 0x30	; 48
     22c:	88 60       	ori	r24, 0x08	; 8
     22e:	80 bf       	out	0x30, r24	; 48
	TCNT0 = 0x00; //Reset start value for the timer
     230:	12 be       	out	0x32, r1	; 50
	TCCR0 = (0<<CS2) | (0<<CS1) | (1<<CS0); //Select prescaler value of 1-> 128 interrupt every second
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	83 bf       	out	0x33, r24	; 51
	while(!bit_is_clear(ASSR, TCN0UB)) //Wait for ASSR to be updated
     236:	00 b6       	in	r0, 0x30	; 48
     238:	02 fc       	sbrc	r0, 2
     23a:	fd cf       	rjmp	.-6      	; 0x236 <TIM0_RTC_init+0xc>
  	{}
  	TIMSK |= (1<<TOIE0); //Enable Timer 0 Overflow interrupt
     23c:	87 b7       	in	r24, 0x37	; 55
     23e:	81 60       	ori	r24, 0x01	; 1
     240:	87 bf       	out	0x37, r24	; 55
  	sei(); //Enable global interrupt
     242:	78 94       	sei
     244:	08 95       	ret

00000246 <__vector_12>:

//***********************************************************************
//                     ISR for timer one
//***********************************************************************
ISR(TIMER1_COMPA_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
     268:	ef 93       	push	r30
     26a:	ff 93       	push	r31
	if(trigger_alarm)
     26c:	80 91 1c 01 	lds	r24, 0x011C
     270:	88 23       	and	r24, r24
     272:	f9 f0       	breq	.+62     	; 0x2b2 <__vector_12+0x6c>
 	{	
		PORTD ^= (1<<PD2); //Toggle PORTD pin 2 with XOR operation
     274:	92 b3       	in	r25, 0x12	; 18
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	89 27       	eor	r24, r25
     27a:	82 bb       	out	0x12, r24	; 18
		if(!display_WR)
     27c:	80 91 1a 01 	lds	r24, 0x011A
     280:	88 23       	and	r24, r24
     282:	71 f1       	breq	.+92     	; 0x2e0 <__vector_12+0x9a>
		trigger_alarm = 1;
		TENsec_counter = 0;
		clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0))
     284:	80 91 1c 01 	lds	r24, 0x011C
     288:	88 23       	and	r24, r24
     28a:	09 f1       	breq	.+66     	; 0x2ce <__vector_12+0x88>
		display_WR = 0; 
		clear_display();
	}
	if(!trigger_alarm)
		PORTD &= (0<<PD2);
}
     28c:	ff 91       	pop	r31
     28e:	ef 91       	pop	r30
     290:	bf 91       	pop	r27
     292:	af 91       	pop	r26
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	7f 91       	pop	r23
     29a:	6f 91       	pop	r22
     29c:	5f 91       	pop	r21
     29e:	4f 91       	pop	r20
     2a0:	3f 91       	pop	r19
     2a2:	2f 91       	pop	r18
     2a4:	0f 90       	pop	r0
     2a6:	0b be       	out	0x3b, r0	; 59
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti
		if(!display_WR)
		{	string2lcd("Alarm!");
			display_WR = 1;}
			
	}
	else if(TENsec_counter == 1280)
     2b2:	80 91 18 01 	lds	r24, 0x0118
     2b6:	90 91 19 01 	lds	r25, 0x0119
     2ba:	81 15       	cp	r24, r1
     2bc:	95 40       	sbci	r25, 0x05	; 5
     2be:	e1 f0       	breq	.+56     	; 0x2f8 <__vector_12+0xb2>
		trigger_alarm = 1;
		TENsec_counter = 0;
		clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0))
     2c0:	80 91 1a 01 	lds	r24, 0x011A
     2c4:	81 11       	cpse	r24, r1
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <__vector_12+0x88>
	{
		display_WR = 0; 
		clear_display();
	}
	if(!trigger_alarm)
		PORTD &= (0<<PD2);
     2c8:	82 b3       	in	r24, 0x12	; 18
     2ca:	12 ba       	out	0x12, r1	; 18
     2cc:	df cf       	rjmp	.-66     	; 0x28c <__vector_12+0x46>
		clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0))
	{
		display_WR = 0; 
     2ce:	10 92 1a 01 	sts	0x011A, r1
		clear_display();
     2d2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <clear_display>
     2d6:	80 91 1c 01 	lds	r24, 0x011C
	}
	if(!trigger_alarm)
     2da:	88 23       	and	r24, r24
     2dc:	a9 f3       	breq	.-22     	; 0x2c8 <__vector_12+0x82>
     2de:	d6 cf       	rjmp	.-84     	; 0x28c <__vector_12+0x46>
{
	if(trigger_alarm)
 	{	
		PORTD ^= (1<<PD2); //Toggle PORTD pin 2 with XOR operation
		if(!display_WR)
		{	string2lcd("Alarm!");
     2e0:	81 e1       	ldi	r24, 0x11	; 17
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 12 05 	call	0xa24	; 0xa24 <string2lcd>
			display_WR = 1;}
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 1a 01 	sts	0x011A, r24
		trigger_alarm = 1;
		TENsec_counter = 0;
		clear_display();
		display_WR = 0;
	}
	if((display_WR == 1) && (trigger_alarm == 0))
     2ee:	80 91 1c 01 	lds	r24, 0x011C
     2f2:	81 11       	cpse	r24, r1
     2f4:	cb cf       	rjmp	.-106    	; 0x28c <__vector_12+0x46>
     2f6:	eb cf       	rjmp	.-42     	; 0x2ce <__vector_12+0x88>
		{	string2lcd("Alarm!");
			display_WR = 1;}
			
	}
	else if(TENsec_counter == 1280)
	{	snooze = 0;
     2f8:	10 92 1b 01 	sts	0x011B, r1
		trigger_alarm = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 1c 01 	sts	0x011C, r24
		TENsec_counter = 0;
     302:	10 92 19 01 	sts	0x0119, r1
     306:	10 92 18 01 	sts	0x0118, r1
		clear_display();
     30a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <clear_display>
		display_WR = 0;
     30e:	10 92 1a 01 	sts	0x011A, r1
     312:	80 91 1c 01 	lds	r24, 0x011C
     316:	e1 cf       	rjmp	.-62     	; 0x2da <__vector_12+0x94>

00000318 <TIM1_init>:
//                     Timer 1 initialization
//***********************************************************************

void TIM1_init()
{
  	TCCR1A = 0x00;                  //Normal mode operation
     318:	1f bc       	out	0x2f, r1	; 47
  	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS11);   //use OCR1A as source for TOP, use clk/1024
     31a:	8b e0       	ldi	r24, 0x0B	; 11
     31c:	8e bd       	out	0x2e, r24	; 46
  	TCCR1C = 0x00;                          //no forced compare 
     31e:	10 92 7a 00 	sts	0x007A, r1
  	OCR1A = 0x0269; //top value
     322:	89 e6       	ldi	r24, 0x69	; 105
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	9b bd       	out	0x2b, r25	; 43
     328:	8a bd       	out	0x2a, r24	; 42
  	TIMSK |= (1<<OCIE1A); //enable interrupt
     32a:	87 b7       	in	r24, 0x37	; 55
     32c:	80 61       	ori	r24, 0x10	; 16
     32e:	87 bf       	out	0x37, r24	; 55

  	DDRD |= (1<<PORTD2); // Port D bit 2 output
     330:	8a 9a       	sbi	0x11, 2	; 17
  	PORTD |= (0<<PD2); //high state
     332:	82 b3       	in	r24, 0x12	; 18
     334:	82 bb       	out	0x12, r24	; 18
     336:	08 95       	ret

00000338 <InitLEDdisplay>:

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	8a bb       	out	0x1a, r24	; 26
  	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
     33c:	87 b3       	in	r24, 0x17	; 23
     33e:	80 6f       	ori	r24, 0xF0	; 240
     340:	87 bb       	out	0x17, r24	; 23
  	asm("nop"); //IO Synchronization delay
     342:	00 00       	nop
  	asm("nop"); //IO Synchronization delay
     344:	00 00       	nop
  	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
     346:	88 b3       	in	r24, 0x18	; 24
     348:	80 66       	ori	r24, 0x60	; 96
     34a:	88 bb       	out	0x18, r24	; 24
  	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
     34c:	88 b3       	in	r24, 0x18	; 24
     34e:	8f 76       	andi	r24, 0x6F	; 111
     350:	88 bb       	out	0x18, r24	; 24
     352:	08 95       	ret

00000354 <SelectDigit>:

//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	91 05       	cpc	r25, r1
     358:	b9 f0       	breq	.+46     	; 0x388 <SelectDigit+0x34>
     35a:	3c f4       	brge	.+14     	; 0x36a <SelectDigit+0x16>
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	91 f0       	breq	.+36     	; 0x384 <SelectDigit+0x30>
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	61 f4       	brne	.+24     	; 0x37c <SelectDigit+0x28>
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     364:	80 e1       	ldi	r24, 0x10	; 16
     366:	88 bb       	out	0x18, r24	; 24
                        break;
     368:	08 95       	ret

//This function take in parameter the DigitNumber to select
//It chooses the correct parameters to turn on that digit
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	91 05       	cpc	r25, r1
     36e:	39 f0       	breq	.+14     	; 0x37e <SelectDigit+0x2a>
     370:	04 97       	sbiw	r24, 0x04	; 4
     372:	19 f4       	brne	.+6      	; 0x37a <SelectDigit+0x26>
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
            		PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
     374:	80 e4       	ldi	r24, 0x40	; 64
     376:	88 bb       	out	0x18, r24	; 24
     378:	08 95       	ret
     37a:	08 95       	ret
     37c:	08 95       	ret
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
     37e:	80 e3       	ldi	r24, 0x30	; 48
     380:	88 bb       	out	0x18, r24	; 24
                        break;
     382:	08 95       	ret
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     384:	18 ba       	out	0x18, r1	; 24
                        break;
     386:	08 95       	ret
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	88 bb       	out	0x18, r24	; 24
                    break; 
     38c:	08 95       	ret

0000038e <SeperateDigits>:
/*void SeperateDigits(int counter)
*This function separates the counter value into 4 different digits to be displayed
*The value of the number to be displayed by each digit is a modulo of 10
*/
void SeperateDigits()
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
   //if set alarm ena = 1, minute_alarm and hour_alarm; else minute_clk hour_clk

	uint8_t minute = 0, hour = 0;
	if(set_alarm_ena == 1)
     392:	80 91 1e 01 	lds	r24, 0x011E
     396:	88 23       	and	r24, r24
     398:	09 f4       	brne	.+2      	; 0x39c <SeperateDigits+0xe>
     39a:	84 c0       	rjmp	.+264    	; 0x4a4 <SeperateDigits+0x116>
	{	minute = minute_alarm;
     39c:	c0 91 0c 01 	lds	r28, 0x010C
		hour = hour_alarm;
     3a0:	a0 91 22 01 	lds	r26, 0x0122
	else
	{	minute = minute_clk;
		hour = hour_clk;
	}

	segment_data[0] = dec_to_7seg[minute%10]; //The ones for minutes
     3a4:	8d ec       	ldi	r24, 0xCD	; 205
     3a6:	c8 9f       	mul	r28, r24
     3a8:	e1 2d       	mov	r30, r1
     3aa:	11 24       	eor	r1, r1
     3ac:	e6 95       	lsr	r30
     3ae:	e6 95       	lsr	r30
     3b0:	e6 95       	lsr	r30
     3b2:	2a e0       	ldi	r18, 0x0A	; 10
     3b4:	e2 9f       	mul	r30, r18
     3b6:	c0 19       	sub	r28, r0
     3b8:	11 24       	eor	r1, r1
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	c0 50       	subi	r28, 0x00	; 0
     3be:	df 4f       	sbci	r29, 0xFF	; 255
     3c0:	98 81       	ld	r25, Y
     3c2:	90 93 3a 01 	sts	0x013A, r25
	segment_data[1] = dec_to_7seg[(minute/10)%10]; //The tens for minutes
     3c6:	e8 9f       	mul	r30, r24
     3c8:	91 2d       	mov	r25, r1
     3ca:	11 24       	eor	r1, r1
     3cc:	96 95       	lsr	r25
     3ce:	96 95       	lsr	r25
     3d0:	96 95       	lsr	r25
     3d2:	2a e0       	ldi	r18, 0x0A	; 10
     3d4:	92 9f       	mul	r25, r18
     3d6:	e0 19       	sub	r30, r0
     3d8:	11 24       	eor	r1, r1
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	e0 50       	subi	r30, 0x00	; 0
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	90 81       	ld	r25, Z
     3e2:	90 93 3b 01 	sts	0x013B, r25
	segment_data[2] = dec_to_7seg[hour%10]; //The ones for hours
     3e6:	a8 9f       	mul	r26, r24
     3e8:	e1 2d       	mov	r30, r1
     3ea:	11 24       	eor	r1, r1
     3ec:	e6 95       	lsr	r30
     3ee:	e6 95       	lsr	r30
     3f0:	e6 95       	lsr	r30
     3f2:	9a e0       	ldi	r25, 0x0A	; 10
     3f4:	e9 9f       	mul	r30, r25
     3f6:	a0 19       	sub	r26, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	a0 50       	subi	r26, 0x00	; 0
     3fe:	bf 4f       	sbci	r27, 0xFF	; 255
     400:	9c 91       	ld	r25, X
     402:	90 93 3c 01 	sts	0x013C, r25
	segment_data[3] = dec_to_7seg[(hour/10)%10]; //The tens for hour
     406:	e8 9f       	mul	r30, r24
     408:	81 2d       	mov	r24, r1
     40a:	11 24       	eor	r1, r1
     40c:	86 95       	lsr	r24
     40e:	86 95       	lsr	r24
     410:	86 95       	lsr	r24
     412:	2a e0       	ldi	r18, 0x0A	; 10
     414:	82 9f       	mul	r24, r18
     416:	e0 19       	sub	r30, r0
     418:	11 24       	eor	r1, r1
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	e0 50       	subi	r30, 0x00	; 0
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	80 81       	ld	r24, Z
     422:	80 93 3d 01 	sts	0x013D, r24
	segment_data[4] = 0xFC; //Colon 
     426:	8c ef       	ldi	r24, 0xFC	; 252
     428:	80 93 3e 01 	sts	0x013E, r24
void SelectDigit(int DigitNumber)
{
  	switch (DigitNumber)
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     42c:	18 ba       	out	0x18, r1	; 24
	segment_data[4] = 0xFC; //Colon 

	//uint8_t colon = 0xFC; 

	SelectDigit(0); //Select digit 0
	PORTA = segment_data[0]; //Display the "ones" value
     42e:	80 91 3a 01 	lds	r24, 0x013A
     432:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     434:	8f e9       	ldi	r24, 0x9F	; 159
     436:	9f e0       	ldi	r25, 0x0F	; 15
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <SeperateDigits+0xaa>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <SeperateDigits+0xb0>
     43e:	00 00       	nop
        {
                case 0: //Choose digit number 1 (from the right)
                        PORTB = (0<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
     440:	80 e1       	ldi	r24, 0x10	; 16
     442:	88 bb       	out	0x18, r24	; 24
	SelectDigit(0); //Select digit 0
	PORTA = segment_data[0]; //Display the "ones" value
	_delay_ms(1); 

	SelectDigit(1); //Select Digit 1
	PORTA = segment_data[1]; //Dispay "tens" value
     444:	80 91 3b 01 	lds	r24, 0x013B
     448:	8b bb       	out	0x1b, r24	; 27
     44a:	8f e9       	ldi	r24, 0x9F	; 159
     44c:	9f e0       	ldi	r25, 0x0F	; 15
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <SeperateDigits+0xc0>
     452:	00 c0       	rjmp	.+0      	; 0x454 <SeperateDigits+0xc6>
     454:	00 00       	nop
	_delay_ms(1);

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
     456:	80 91 1f 01 	lds	r24, 0x011F
     45a:	88 23       	and	r24, r24
     45c:	41 f1       	breq	.+80     	; 0x4ae <SeperateDigits+0x120>
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	88 bb       	out	0x18, r24	; 24
				PORTA = 0xFC; //On
		}
	}
	else if((set_clock_ena || set_alarm_ena) == 1)
	{	SelectDigit(2); //If time or alarm are being set, no blinking of colon
		PORTA = 0xFC;
     462:	8c ef       	ldi	r24, 0xFC	; 252
     464:	8b bb       	out	0x1b, r24	; 27
     466:	8f e9       	ldi	r24, 0x9F	; 159
     468:	9f e0       	ldi	r25, 0x0F	; 15
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <SeperateDigits+0xdc>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <SeperateDigits+0xe2>
     470:	00 00       	nop
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
     472:	80 e3       	ldi	r24, 0x30	; 48
     474:	88 bb       	out	0x18, r24	; 24
	
	
	_delay_ms(1);

	SelectDigit(3); //Select Digit 3 
	PORTA = segment_data[2]; //Display hundreds valus
     476:	80 91 3c 01 	lds	r24, 0x013C
     47a:	8b bb       	out	0x1b, r24	; 27
     47c:	8f e9       	ldi	r24, 0x9F	; 159
     47e:	9f e0       	ldi	r25, 0x0F	; 15
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <SeperateDigits+0xf2>
     484:	00 c0       	rjmp	.+0      	; 0x486 <SeperateDigits+0xf8>
     486:	00 00       	nop
                    break; 
                case 3:  //Choose digit number 3
                        PORTB = (1<<PORTB4) | (1<<PORTB5) | (0<<PORTB6);
                        break;
                case 4: //Choose digit number 4
            		PORTB = (0<<PORTB4) | (0<<PORTB5) | (1<<PORTB6);
     488:	80 e4       	ldi	r24, 0x40	; 64
     48a:	88 bb       	out	0x18, r24	; 24
	SelectDigit(3); //Select Digit 3 
	PORTA = segment_data[2]; //Display hundreds valus
	_delay_ms(1);

	SelectDigit(4); //Select Digit 4
	PORTA = segment_data[3]; //Display thousands value
     48c:	80 91 3d 01 	lds	r24, 0x013D
     490:	8b bb       	out	0x1b, r24	; 27
     492:	8f e9       	ldi	r24, 0x9F	; 159
     494:	9f e0       	ldi	r25, 0x0F	; 15
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <SeperateDigits+0x108>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <SeperateDigits+0x10e>
     49c:	00 00       	nop
	_delay_ms(1);

}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret
	if(set_alarm_ena == 1)
	{	minute = minute_alarm;
		hour = hour_alarm;
	}
	else
	{	minute = minute_clk;
     4a4:	c0 91 24 01 	lds	r28, 0x0124
		hour = hour_clk;
     4a8:	a0 91 23 01 	lds	r26, 0x0123
     4ac:	7b cf       	rjmp	.-266    	; 0x3a4 <SeperateDigits+0x16>

	SelectDigit(1); //Select Digit 1
	PORTA = segment_data[1]; //Dispay "tens" value
	_delay_ms(1);

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
     4ae:	80 91 1e 01 	lds	r24, 0x011E
     4b2:	81 11       	cpse	r24, r1
     4b4:	d4 cf       	rjmp	.-88     	; 0x45e <SeperateDigits+0xd0>
                        break;
                case 1:  //Choose digit number 2 
                        PORTB = (1<<PORTB4) | (0<<PORTB5) | (0<<PORTB6);
                        break;
                case 2: //Choose the colon 
                    	PORTB = (0<<PORTB4) | (1<<PORTB5) | (0<<PORTB7);
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	88 bb       	out	0x18, r24	; 24
	PORTA = segment_data[1]; //Dispay "tens" value
	_delay_ms(1);

	if((set_clock_ena == 0) && ( set_alarm_ena == 0))
	{	SelectDigit(2); //Select Digit 2: colon
		if(second_flag == 0) //Flag for a half second
     4ba:	80 91 20 01 	lds	r24, 0x0120
     4be:	81 11       	cpse	r24, r1
     4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <SeperateDigits+0x144>
		{	if(alarm_set)
     4c2:	80 91 1d 01 	lds	r24, 0x011D
     4c6:	88 23       	and	r24, r24
     4c8:	69 f0       	breq	.+26     	; 0x4e4 <SeperateDigits+0x156>
				PORTA = 0xFB;
     4ca:	8b ef       	ldi	r24, 0xFB	; 251
     4cc:	8b bb       	out	0x1b, r24	; 27
     4ce:	80 91 20 01 	lds	r24, 0x0120
			else 	
				PORTA = 0xFF; //Off
		}
		if(second_flag == 1)
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	41 f6       	brne	.-112    	; 0x466 <SeperateDigits+0xd8>
		{ 	if(alarm_set)
     4d6:	80 91 1d 01 	lds	r24, 0x011D
     4da:	88 23       	and	r24, r24
     4dc:	11 f2       	breq	.-124    	; 0x462 <SeperateDigits+0xd4>
				PORTA = 0xF8;
     4de:	88 ef       	ldi	r24, 0xF8	; 248
     4e0:	8b bb       	out	0x1b, r24	; 27
     4e2:	c1 cf       	rjmp	.-126    	; 0x466 <SeperateDigits+0xd8>
	{	SelectDigit(2); //Select Digit 2: colon
		if(second_flag == 0) //Flag for a half second
		{	if(alarm_set)
				PORTA = 0xFB;
			else 	
				PORTA = 0xFF; //Off
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	8b bb       	out	0x1b, r24	; 27
     4e8:	80 91 20 01 	lds	r24, 0x0120
     4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <SeperateDigits+0x144>

000004ee <TIM2_PWM_init>:
}

void TIM2_PWM_init(void)
{
    /* Timer clock = I/O clock */    
    TCCR2 = 0x69; 
     4ee:	89 e6       	ldi	r24, 0x69	; 105
     4f0:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	83 bd       	out	0x23, r24	; 35
    /* Set OC2A pin as output */
    DDRB |= 0b10000000;
     4f6:	bf 9a       	sbi	0x17, 7	; 23
     4f8:	08 95       	ret

000004fa <TIM3_PWM_init>:
}

void TIM3_PWM_init()
{
	DDRE |= (1<<PE3);
     4fa:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x1FF; //50% duty cycle
     4fc:	8f ef       	ldi	r24, 0xFF	; 255
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	90 93 87 00 	sts	0x0087, r25
     504:	80 93 86 00 	sts	0x0086, r24
	TCCR3A = (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30); //Fast PWM 10bit 
     508:	83 ec       	ldi	r24, 0xC3	; 195
     50a:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1<<WGM32) | (1<<CS30); //Set OC3A on compare match
     50e:	89 e0       	ldi	r24, 0x09	; 9
     510:	80 93 8a 00 	sts	0x008A, r24
     514:	08 95       	ret

00000516 <TIM3_set_PWM>:
}

void TIM3_set_PWM(int duty_cycle)
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
	OCR3A = 1023 - ((duty_cycle*1023)/100); //set the duty cycle value
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	33 e0       	ldi	r19, 0x03	; 3
     51a:	ac 01       	movw	r20, r24
     51c:	42 9f       	mul	r20, r18
     51e:	c0 01       	movw	r24, r0
     520:	43 9f       	mul	r20, r19
     522:	90 0d       	add	r25, r0
     524:	52 9f       	mul	r21, r18
     526:	90 0d       	add	r25, r0
     528:	11 24       	eor	r1, r1
     52a:	6c e9       	ldi	r22, 0x9C	; 156
     52c:	7f ef       	ldi	r23, 0xFF	; 255
     52e:	0e 94 2f 08 	call	0x105e	; 0x105e <__divmodhi4>
     532:	61 50       	subi	r22, 0x01	; 1
     534:	7c 4f       	sbci	r23, 0xFC	; 252
     536:	70 93 87 00 	sts	0x0087, r23
     53a:	60 93 86 00 	sts	0x0086, r22
     53e:	08 95       	ret

00000540 <ADC_init>:
}

void ADC_init()
{
  //Initalize ADC and its ports
  	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
     540:	e1 e6       	ldi	r30, 0x61	; 97
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8f 77       	andi	r24, 0x7F	; 127
     548:	80 83       	st	Z, r24
  	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     54a:	e2 e6       	ldi	r30, 0x62	; 98
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	80 83       	st	Z, r24
  	ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7, right adjusted, 10 bits
     554:	87 e4       	ldi	r24, 0x47	; 71
     556:	87 b9       	out	0x07, r24	; 7
  	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enabled, don't start yet, single shot mode 
     558:	86 b1       	in	r24, 0x06	; 6
     55a:	8f 68       	ori	r24, 0x8F	; 143
     55c:	86 b9       	out	0x06, r24	; 6
     55e:	08 95       	ret

00000560 <__vector_21>:
                             //division factor is 128 (125khz)
}

ISR(ADC_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	5f 93       	push	r21
     570:	6f 93       	push	r22
     572:	7f 93       	push	r23
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	af 93       	push	r26
     57a:	bf 93       	push	r27
  	int brightness_lvl = -1;
  	adc_result = ADC; //read the ADC output as 16 bits
     57c:	84 b1       	in	r24, 0x04	; 4
     57e:	95 b1       	in	r25, 0x05	; 5
     580:	90 93 39 01 	sts	0x0139, r25
     584:	80 93 38 01 	sts	0x0138, r24
  	brightness_lvl = (5*adc_result)/1023; 
     588:	9c 01       	movw	r18, r24
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	22 0f       	add	r18, r18
     590:	33 1f       	adc	r19, r19
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	6f ef       	ldi	r22, 0xFF	; 255
     598:	73 e0       	ldi	r23, 0x03	; 3
     59a:	0e 94 1b 08 	call	0x1036	; 0x1036 <__udivmodhi4>

  	switch(brightness_lvl)
     59e:	62 30       	cpi	r22, 0x02	; 2
     5a0:	71 05       	cpc	r23, r1
     5a2:	51 f1       	breq	.+84     	; 0x5f8 <__vector_21+0x98>
     5a4:	bc f4       	brge	.+46     	; 0x5d4 <__vector_21+0x74>
     5a6:	61 15       	cp	r22, r1
     5a8:	71 05       	cpc	r23, r1
     5aa:	19 f1       	breq	.+70     	; 0x5f2 <__vector_21+0x92>
     5ac:	61 30       	cpi	r22, 0x01	; 1
     5ae:	71 05       	cpc	r23, r1
     5b0:	d1 f4       	brne	.+52     	; 0x5e6 <__vector_21+0x86>
	{
		case(1): //Resistance very high, dark environment  
			OCR2 = 0xCC; //80% duty cycle, LED display is active low
     5b2:	8c ec       	ldi	r24, 0xCC	; 204
     5b4:	83 bd       	out	0x23, r24	; 35
		default: 
			OCR2 = 0x80; //Default duty cycle is 50% 
			break;
	}//switch case

  	ADCSRA |= (1<<ADSC); //Start next ADC conversion
     5b6:	36 9a       	sbi	0x06, 6	; 6
}
     5b8:	bf 91       	pop	r27
     5ba:	af 91       	pop	r26
     5bc:	9f 91       	pop	r25
     5be:	8f 91       	pop	r24
     5c0:	7f 91       	pop	r23
     5c2:	6f 91       	pop	r22
     5c4:	5f 91       	pop	r21
     5c6:	3f 91       	pop	r19
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti
{
  	int brightness_lvl = -1;
  	adc_result = ADC; //read the ADC output as 16 bits
  	brightness_lvl = (5*adc_result)/1023; 

  	switch(brightness_lvl)
     5d4:	63 30       	cpi	r22, 0x03	; 3
     5d6:	71 05       	cpc	r23, r1
     5d8:	49 f0       	breq	.+18     	; 0x5ec <__vector_21+0x8c>
     5da:	64 30       	cpi	r22, 0x04	; 4
     5dc:	71 05       	cpc	r23, r1
     5de:	19 f4       	brne	.+6      	; 0x5e6 <__vector_21+0x86>
			break; 
		case(3):
			OCR2 = 0x66; //40% duty cycle
			break;
		case(4):
			OCR2 = 0x33; //20% duty cycle 
     5e0:	83 e3       	ldi	r24, 0x33	; 51
     5e2:	83 bd       	out	0x23, r24	; 35
			break; 
     5e4:	e8 cf       	rjmp	.-48     	; 0x5b6 <__vector_21+0x56>
		case(0):
			OCR2 = 0x1A; //10% duty cycle
			break;
		default: 
			OCR2 = 0x80; //Default duty cycle is 50% 
     5e6:	80 e8       	ldi	r24, 0x80	; 128
     5e8:	83 bd       	out	0x23, r24	; 35
			break;
     5ea:	e5 cf       	rjmp	.-54     	; 0x5b6 <__vector_21+0x56>
			break;
		case(2): 
			OCR2 = 0x9A; //60% duty cycle
			break; 
		case(3):
			OCR2 = 0x66; //40% duty cycle
     5ec:	86 e6       	ldi	r24, 0x66	; 102
     5ee:	83 bd       	out	0x23, r24	; 35
			break;
     5f0:	e2 cf       	rjmp	.-60     	; 0x5b6 <__vector_21+0x56>
		case(4):
			OCR2 = 0x33; //20% duty cycle 
			break; 
		case(0):
			OCR2 = 0x1A; //10% duty cycle
     5f2:	8a e1       	ldi	r24, 0x1A	; 26
     5f4:	83 bd       	out	0x23, r24	; 35
			break;
     5f6:	df cf       	rjmp	.-66     	; 0x5b6 <__vector_21+0x56>
	{
		case(1): //Resistance very high, dark environment  
			OCR2 = 0xCC; //80% duty cycle, LED display is active low
			break;
		case(2): 
			OCR2 = 0x9A; //60% duty cycle
     5f8:	8a e9       	ldi	r24, 0x9A	; 154
     5fa:	83 bd       	out	0x23, r24	; 35
			break; 
     5fc:	dc cf       	rjmp	.-72     	; 0x5b6 <__vector_21+0x56>

000005fe <chk_buttons>:
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     5fe:	e8 2f       	mov	r30, r24
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	29 b3       	in	r18, 0x19	; 25
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	e9 5d       	subi	r30, 0xD9	; 217
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	40 81       	ld	r20, Z
     60e:	51 81       	ldd	r21, Z+1	; 0x01
     610:	44 0f       	add	r20, r20
     612:	55 1f       	adc	r21, r21
     614:	50 6e       	ori	r21, 0xE0	; 224
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	b9 01       	movw	r22, r18
     61a:	02 c0       	rjmp	.+4      	; 0x620 <chk_buttons+0x22>
     61c:	75 95       	asr	r23
     61e:	67 95       	ror	r22
     620:	8a 95       	dec	r24
     622:	e2 f7       	brpl	.-8      	; 0x61c <chk_buttons+0x1e>
     624:	cb 01       	movw	r24, r22
     626:	81 70       	andi	r24, 0x01	; 1
     628:	99 27       	eor	r25, r25
     62a:	84 2b       	or	r24, r20
     62c:	95 2b       	or	r25, r21
     62e:	91 83       	std	Z+1, r25	; 0x01
     630:	80 83       	st	Z, r24
  	if (state[PinNumber] == 0xF000) return 1;
     632:	81 15       	cp	r24, r1
     634:	90 4f       	sbci	r25, 0xF0	; 240
     636:	49 f0       	breq	.+18     	; 0x64a <chk_buttons+0x4c>
     638:	8f e9       	ldi	r24, 0x9F	; 159
     63a:	9f e0       	ldi	r25, 0x0F	; 15
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <chk_buttons+0x3e>
     640:	00 c0       	rjmp	.+0      	; 0x642 <chk_buttons+0x44>
     642:	00 00       	nop
  	_delay_ms(1);
  	return 0;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	08 95       	ret
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
  	if (state[PinNumber] == 0xF000) return 1;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
  	_delay_ms(1);
  	return 0;
}
     64e:	08 95       	ret

00000650 <Encoder1_handling>:

//This function takes in input the data received by the encoder via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
     650:	48 2f       	mov	r20, r24
     652:	41 70       	andi	r20, 0x01	; 1
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  
     654:	9c 01       	movw	r18, r24
     656:	35 95       	asr	r19
     658:	27 95       	ror	r18
     65a:	21 70       	andi	r18, 0x01	; 1

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     65c:	80 91 10 01 	lds	r24, 0x0110
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	31 f0       	breq	.+12     	; 0x670 <Encoder1_handling+0x20>
                        else
                        {	counter = 0;} //reset the counter value 
                }
        }

        A_old = A_value; //Update the past A switch value
     664:	40 93 10 01 	sts	0x0110, r20
        B_old = B_value; //Update the past B switch value
     668:	20 93 0f 01 	sts	0x010F, r18
	return counter;
}
     66c:	86 2f       	mov	r24, r22
     66e:	08 95       	ret
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     670:	80 91 0f 01 	lds	r24, 0x010F
     674:	44 23       	and	r20, r20
     676:	59 f0       	breq	.+22     	; 0x68e <Encoder1_handling+0x3e>
                	{       counter = 59; //reset the counter value 
                	}

        	}
        }
        else if ((A_old == 1) && (A_value == 1)&& ((B_old == 1) && (B_value == 0))) //if the encoder switches were toggled counter clockwise
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	a1 f7       	brne	.-24     	; 0x664 <Encoder1_handling+0x14>
     67c:	21 11       	cpse	r18, r1
     67e:	f2 cf       	rjmp	.-28     	; 0x664 <Encoder1_handling+0x14>
        {
                direction = CCW; //set the direction
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	80 93 26 01 	sts	0x0126, r24
                if ((direction == 2) & ((A_old != A_value) | (B_old != B_value)))
                //make sure to increment by 1 from resting state to resting state, if the 2 buttons were pushed, no incrementation 
                {       if(counter < 59 && (counter + 1) < 59) //Make sure to respect the boundaries
     686:	6a 33       	cpi	r22, 0x3A	; 58
     688:	60 f4       	brcc	.+24     	; 0x6a2 <Encoder1_handling+0x52>
			{	counter++;} //incrementation of the counter
     68a:	6f 5f       	subi	r22, 0xFF	; 255
     68c:	eb cf       	rjmp	.-42     	; 0x664 <Encoder1_handling+0x14>
uint8_t Encoder1_handling(int data_encoder, uint8_t counter)
{
        uint8_t A_value = data_encoder & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>1) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A_old == 1) && (A_value == 0)) && ((B_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	49 f7       	brne	.-46     	; 0x664 <Encoder1_handling+0x14>
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	39 f7       	brne	.-50     	; 0x664 <Encoder1_handling+0x14>
        {
                direction = CW;  // set the direction 
     696:	20 93 26 01 	sts	0x0126, r18
                if((direction == 1) &((A_old != A_value) | (B_old !=  B_value)))
                //make sure to decrement by 1 from resting state to resting state, if the 2 buttons were pushed, no decrementation
        	{
                	if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
     69a:	66 23       	and	r22, r22
     69c:	21 f0       	breq	.+8      	; 0x6a6 <Encoder1_handling+0x56>
                	{       //minute_clk = minute_clk +(inc_sign*pow(2,x)); //decrementation of the counter
                		counter--;
     69e:	61 50       	subi	r22, 0x01	; 1
     6a0:	e1 cf       	rjmp	.-62     	; 0x664 <Encoder1_handling+0x14>
                if ((direction == 2) & ((A_old != A_value) | (B_old != B_value)))
                //make sure to increment by 1 from resting state to resting state, if the 2 buttons were pushed, no incrementation 
                {       if(counter < 59 && (counter + 1) < 59) //Make sure to respect the boundaries
			{	counter++;} //incrementation of the counter
                        else
                        {	counter = 0;} //reset the counter value 
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	df cf       	rjmp	.-66     	; 0x664 <Encoder1_handling+0x14>
                	if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
                	{       //minute_clk = minute_clk +(inc_sign*pow(2,x)); //decrementation of the counter
                		counter--;
			}
                	else
                	{       counter = 59; //reset the counter value 
     6a6:	6b e3       	ldi	r22, 0x3B	; 59
     6a8:	dd cf       	rjmp	.-70     	; 0x664 <Encoder1_handling+0x14>

000006aa <Encoder2_handling>:

//This function takes in input the data received by the encoder via SPI
//Data is being processed to increment the counter properly 
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
     6aa:	9c 01       	movw	r18, r24
     6ac:	35 95       	asr	r19
     6ae:	27 95       	ror	r18
     6b0:	35 95       	asr	r19
     6b2:	27 95       	ror	r18
     6b4:	52 2f       	mov	r21, r18
     6b6:	51 70       	andi	r21, 0x01	; 1
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  
     6b8:	9c 01       	movw	r18, r24
     6ba:	35 95       	asr	r19
     6bc:	27 95       	ror	r18
     6be:	35 95       	asr	r19
     6c0:	27 95       	ror	r18
     6c2:	35 95       	asr	r19
     6c4:	27 95       	ror	r18
     6c6:	21 70       	andi	r18, 0x01	; 1

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     6c8:	80 91 0e 01 	lds	r24, 0x010E
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	31 f0       	breq	.+12     	; 0x6dc <Encoder2_handling+0x32>
                        else
                        {       counter = 0;} //reset the counter value 
                }
        }

        A2_old = A_value; //Update the past A switch value
     6d0:	50 93 0e 01 	sts	0x010E, r21
        B2_old = B_value; //Update the past B switch value
     6d4:	20 93 0d 01 	sts	0x010D, r18
        return counter;
}
     6d8:	86 2f       	mov	r24, r22
     6da:	08 95       	ret
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     6dc:	80 91 0d 01 	lds	r24, 0x010D
     6e0:	55 23       	and	r21, r21
     6e2:	99 f0       	breq	.+38     	; 0x70a <Encoder2_handling+0x60>
                        {       counter = bound; //reset the counter value 
                        }

                }
        }
        else if ((A2_old == 1) && (A_value == 1)&& ((B2_old == 1) && (B_value == 0))) //if the encoder switches were toggled counter clockwise
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	a1 f7       	brne	.-24     	; 0x6d0 <Encoder2_handling+0x26>
     6e8:	21 11       	cpse	r18, r1
     6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <Encoder2_handling+0x26>
        {
                direction = CCW; //set the direction
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 26 01 	sts	0x0126, r24
                if ((direction == 2) & ((A2_old != A_value) | (B2_old != B_value)))
                //make sure to increment by 1 from resting state to resting state, if the 2 buttons were pushed, no incrementation 
                {       if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
     6f2:	64 17       	cp	r22, r20
     6f4:	a0 f4       	brcc	.+40     	; 0x71e <Encoder2_handling+0x74>
     6f6:	e6 2f       	mov	r30, r22
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	84 2f       	mov	r24, r20
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	e8 17       	cp	r30, r24
     702:	f9 07       	cpc	r31, r25
     704:	64 f4       	brge	.+24     	; 0x71e <Encoder2_handling+0x74>
                        {       counter++;} //incrementation of the counter
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	e3 cf       	rjmp	.-58     	; 0x6d0 <Encoder2_handling+0x26>
uint8_t Encoder2_handling(int data_encoder, uint8_t counter, uint8_t bound)
{
        uint8_t A_value = (data_encoder>>2) & 0x01; //isolate bit0 of the data sent by the encoder
        uint8_t B_value = (data_encoder>>3) & 0x01; //isolate bit1 of the data sent by the encoder  

        if(((A2_old == 1) && (A_value == 0)) && ((B2_old == 1) && (B_value == 1))) //If the encoder switches were toggled clockwise
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	09 f7       	brne	.-62     	; 0x6d0 <Encoder2_handling+0x26>
     70e:	21 30       	cpi	r18, 0x01	; 1
     710:	f9 f6       	brne	.-66     	; 0x6d0 <Encoder2_handling+0x26>
        {
                direction = CW;  // set the direction 
     712:	20 93 26 01 	sts	0x0126, r18
                if((direction == 1) &((A2_old != A_value) | (B2_old !=  B_value)))
                //make sure to decrement by 1 from resting state to resting state, if the 2 buttons were pushed, no decrementation
                {
                        if(counter >= 0  && (counter - 1)>=0) // Make sure to respect the boundaries 
     716:	66 23       	and	r22, r22
     718:	21 f0       	breq	.+8      	; 0x722 <Encoder2_handling+0x78>
                        {       //minute_clk = minute_clk +(inc_sign*pow(2,x)); //decrementation of the counter
                                counter--;
     71a:	61 50       	subi	r22, 0x01	; 1
     71c:	d9 cf       	rjmp	.-78     	; 0x6d0 <Encoder2_handling+0x26>
                if ((direction == 2) & ((A2_old != A_value) | (B2_old != B_value)))
                //make sure to increment by 1 from resting state to resting state, if the 2 buttons were pushed, no incrementation 
                {       if(counter < bound && (counter + 1) < bound) //Make sure to respect the boundaries
                        {       counter++;} //incrementation of the counter
                        else
                        {       counter = 0;} //reset the counter value 
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	d7 cf       	rjmp	.-82     	; 0x6d0 <Encoder2_handling+0x26>
     722:	64 2f       	mov	r22, r20
     724:	d5 cf       	rjmp	.-86     	; 0x6d0 <Encoder2_handling+0x26>

00000726 <Set_Clock>:
        return counter;
}


void Set_Clock()
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	1f 92       	push	r1
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00; //Disable timer 0
     730:	13 be       	out	0x33, r1	; 51

	minute_clk = Encoder1_handling(spi_read(), minute_clk);//Read encoder 1
     732:	60 91 24 01 	lds	r22, 0x0124
     736:	69 83       	std	Y+1, r22	; 0x01
     738:	0e 94 91 00 	call	0x122	; 0x122 <spi_read>
     73c:	69 81       	ldd	r22, Y+1	; 0x01
     73e:	0e 94 28 03 	call	0x650	; 0x650 <Encoder1_handling>
     742:	80 93 24 01 	sts	0x0124, r24
	hour_clk = Encoder2_handling(spi_read(), hour_clk, 23); //Read encoder 2
     746:	60 91 23 01 	lds	r22, 0x0123
     74a:	69 83       	std	Y+1, r22	; 0x01
     74c:	0e 94 91 00 	call	0x122	; 0x122 <spi_read>
     750:	47 e1       	ldi	r20, 0x17	; 23
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	0e 94 55 03 	call	0x6aa	; 0x6aa <Encoder2_handling>
     758:	80 93 23 01 	sts	0x0123, r24
}
     75c:	0f 90       	pop	r0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <Set_Alarm>:

void Set_Alarm()
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	1f 92       	push	r1
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	minute_alarm = Encoder1_handling(spi_read(), minute_alarm); //Read encoder 1
     76e:	60 91 0c 01 	lds	r22, 0x010C
     772:	69 83       	std	Y+1, r22	; 0x01
     774:	0e 94 91 00 	call	0x122	; 0x122 <spi_read>
     778:	69 81       	ldd	r22, Y+1	; 0x01
     77a:	0e 94 28 03 	call	0x650	; 0x650 <Encoder1_handling>
     77e:	80 93 0c 01 	sts	0x010C, r24
	hour_alarm = Encoder2_handling(spi_read(), hour_alarm, 23);  //Read encoder 2
     782:	60 91 22 01 	lds	r22, 0x0122
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	0e 94 91 00 	call	0x122	; 0x122 <spi_read>
     78c:	47 e1       	ldi	r20, 0x17	; 23
     78e:	69 81       	ldd	r22, Y+1	; 0x01
     790:	0e 94 55 03 	call	0x6aa	; 0x6aa <Encoder2_handling>
     794:	80 93 22 01 	sts	0x0122, r24
//	if(chk_buttons(1))
	alarm_set = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 1d 01 	sts	0x011D, r24
}
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <Alarm>:

void Alarm()
{
	if((hour_clk == hour_alarm) && (snooze == 0) && (alarm_set == 1)) 
     7a6:	90 91 23 01 	lds	r25, 0x0123
     7aa:	80 91 22 01 	lds	r24, 0x0122
     7ae:	98 13       	cpse	r25, r24
     7b0:	08 95       	ret
     7b2:	80 91 1b 01 	lds	r24, 0x011B
     7b6:	81 11       	cpse	r24, r1
     7b8:	fb cf       	rjmp	.-10     	; 0x7b0 <Alarm+0xa>
     7ba:	80 91 1d 01 	lds	r24, 0x011D
     7be:	88 23       	and	r24, r24
     7c0:	b9 f3       	breq	.-18     	; 0x7b0 <Alarm+0xa>
	{	if(minute_clk == minute_alarm)
     7c2:	90 91 24 01 	lds	r25, 0x0124
     7c6:	80 91 0c 01 	lds	r24, 0x010C
     7ca:	98 13       	cpse	r25, r24
     7cc:	f1 cf       	rjmp	.-30     	; 0x7b0 <Alarm+0xa>
		{	//spi_write(0xFF);
			trigger_alarm = 1; 
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	80 93 1c 01 	sts	0x011C, r24
     7d4:	08 95       	ret

000007d6 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	81 11       	cpse	r24, r1
     7da:	01 c0       	rjmp	.+2      	; 0x7de <send_lcd+0x8>
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7e0:	77 9b       	sbis	0x0e, 7	; 14
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     7e4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7ea:	80 91 62 00 	lds	r24, 0x0062
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	80 93 62 00 	sts	0x0062, r24
     7f4:	80 91 62 00 	lds	r24, 0x0062
     7f8:	87 7f       	andi	r24, 0xF7	; 247
     7fa:	80 93 62 00 	sts	0x0062, r24
     7fe:	08 95       	ret

00000800 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     800:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     802:	c0 91 37 01 	lds	r28, 0x0137
     806:	8c 0f       	add	r24, r28
     808:	91 1d       	adc	r25, r1
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
 i++;   //increment to next character
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	8c 0f       	add	r24, r28
     818:	80 93 37 01 	sts	0x0137, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     81c:	80 31       	cpi	r24, 0x10	; 16
     81e:	a1 f0       	breq	.+40     	; 0x848 <refresh_lcd+0x48>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     820:	80 32       	cpi	r24, 0x20	; 32
     822:	11 f0       	breq	.+4      	; 0x828 <refresh_lcd+0x28>
}//refresh_lcd
     824:	cf 91       	pop	r28
     826:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     828:	e5 ed       	ldi	r30, 0xD5	; 213
     82a:	ea 95       	dec	r30
     82c:	f1 f7       	brne	.-4      	; 0x82a <refresh_lcd+0x2a>
     82e:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     830:	60 e8       	ldi	r22, 0x80	; 128
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     838:	f5 ed       	ldi	r31, 0xD5	; 213
     83a:	fa 95       	dec	r31
     83c:	f1 f7       	brne	.-4      	; 0x83a <refresh_lcd+0x3a>
     83e:	00 00       	nop
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     840:	10 92 37 01 	sts	0x0137, r1
}//refresh_lcd
     844:	cf 91       	pop	r28
     846:	08 95       	ret
     848:	f5 ed       	ldi	r31, 0xD5	; 213
     84a:	fa 95       	dec	r31
     84c:	f1 f7       	brne	.-4      	; 0x84a <refresh_lcd+0x4a>
     84e:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     850:	60 ec       	ldi	r22, 0xC0	; 192
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     858:	85 ed       	ldi	r24, 0xD5	; 213
     85a:	8a 95       	dec	r24
     85c:	f1 f7       	brne	.-4      	; 0x85a <refresh_lcd+0x5a>
     85e:	00 00       	nop
     860:	80 91 37 01 	lds	r24, 0x0137
     864:	dd cf       	rjmp	.-70     	; 0x820 <refresh_lcd+0x20>

00000866 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     87a:	66 0f       	add	r22, r22
     87c:	66 0f       	add	r22, r22
     87e:	66 0f       	add	r22, r22
     880:	60 5c       	subi	r22, 0xC0	; 192
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	99 83       	std	Y+1, r25	; 0x01
     886:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     88a:	85 ed       	ldi	r24, 0xD5	; 213
     88c:	8a 95       	dec	r24
     88e:	f1 f7       	brne	.-4      	; 0x88c <set_custom_character+0x26>
     890:	00 00       	nop
     892:	e1 2e       	mov	r14, r17
     894:	99 81       	ldd	r25, Y+1	; 0x01
     896:	f9 2e       	mov	r15, r25
     898:	87 01       	movw	r16, r14
     89a:	08 5f       	subi	r16, 0xF8	; 248
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     89e:	f7 01       	movw	r30, r14
     8a0:	61 91       	ld	r22, Z+
     8a2:	7f 01       	movw	r14, r30
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     8aa:	f5 ed       	ldi	r31, 0xD5	; 213
     8ac:	fa 95       	dec	r31
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <set_custom_character+0x46>
     8b0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     8b2:	e0 16       	cp	r14, r16
     8b4:	f1 06       	cpc	r15, r17
     8b6:	99 f7       	brne	.-26     	; 0x89e <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	08 95       	ret

000008c8 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     8c8:	90 e4       	ldi	r25, 0x40	; 64
     8ca:	89 9f       	mul	r24, r25
     8cc:	60 0d       	add	r22, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	60 5c       	subi	r22, 0xC0	; 192
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

000008d8 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
     8d8:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     8da:	88 23       	and	r24, r24
     8dc:	b9 f1       	breq	.+110    	; 0x94c <uint2lcd+0x74>
     8de:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     8e0:	84 36       	cpi	r24, 0x64	; 100
     8e2:	98 f4       	brcc	.+38     	; 0x90a <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     8e4:	8a 30       	cpi	r24, 0x0A	; 10
     8e6:	d8 f4       	brcc	.+54     	; 0x91e <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     8e8:	8d ec       	ldi	r24, 0xCD	; 205
     8ea:	c8 9f       	mul	r28, r24
     8ec:	81 2d       	mov	r24, r1
     8ee:	11 24       	eor	r1, r1
     8f0:	86 95       	lsr	r24
     8f2:	86 95       	lsr	r24
     8f4:	86 95       	lsr	r24
     8f6:	6c 2f       	mov	r22, r28
     8f8:	2a e0       	ldi	r18, 0x0A	; 10
     8fa:	82 9f       	mul	r24, r18
     8fc:	60 19       	sub	r22, r0
     8fe:	11 24       	eor	r1, r1
     900:	60 5d       	subi	r22, 0xD0	; 208
     902:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     904:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     906:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     90a:	69 e2       	ldi	r22, 0x29	; 41
     90c:	86 9f       	mul	r24, r22
     90e:	61 2d       	mov	r22, r1
     910:	11 24       	eor	r1, r1
     912:	62 95       	swap	r22
     914:	6f 70       	andi	r22, 0x0F	; 15
     916:	60 5d       	subi	r22, 0xD0	; 208
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     91e:	89 e2       	ldi	r24, 0x29	; 41
     920:	c8 9f       	mul	r28, r24
     922:	81 2d       	mov	r24, r1
     924:	11 24       	eor	r1, r1
     926:	82 95       	swap	r24
     928:	8f 70       	andi	r24, 0x0F	; 15
     92a:	9c 2f       	mov	r25, r28
     92c:	24 e6       	ldi	r18, 0x64	; 100
     92e:	82 9f       	mul	r24, r18
     930:	90 19       	sub	r25, r0
     932:	11 24       	eor	r1, r1
     934:	6d ec       	ldi	r22, 0xCD	; 205
     936:	96 9f       	mul	r25, r22
     938:	61 2d       	mov	r22, r1
     93a:	11 24       	eor	r1, r1
     93c:	66 95       	lsr	r22
     93e:	66 95       	lsr	r22
     940:	66 95       	lsr	r22
     942:	60 5d       	subi	r22, 0xD0	; 208
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     94a:	ce cf       	rjmp	.-100    	; 0x8e8 <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     94c:	60 e3       	ldi	r22, 0x30	; 48
     94e:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
     950:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     952:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

00000956 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     956:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     958:	87 fd       	sbrc	r24, 7
     95a:	03 c0       	rjmp	.+6      	; 0x962 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
     95c:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
     95e:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <uint2lcd>
     962:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     964:	6d e2       	ldi	r22, 0x2D	; 45
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     96c:	85 ed       	ldi	r24, 0xD5	; 213
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <int2lcd+0x18>
     972:	00 00       	nop
     974:	8c 2f       	mov	r24, r28
     976:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
     978:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     97a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <uint2lcd>

0000097e <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
     97e:	6e e0       	ldi	r22, 0x0E	; 14
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

00000986 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
     986:	6c e0       	ldi	r22, 0x0C	; 12
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

0000098e <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
     98e:	6e e1       	ldi	r22, 0x1E	; 30
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

00000996 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
     996:	68 e1       	ldi	r22, 0x18	; 24
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

0000099e <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     99e:	e2 e6       	ldi	r30, 0x62	; 98
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	88 60       	ori	r24, 0x08	; 8
     9a6:	80 83       	st	Z, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	80 83       	st	Z, r24
     9ae:	08 95       	ret

000009b0 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     9b8:	8f e1       	ldi	r24, 0x1F	; 31
     9ba:	9c e1       	ldi	r25, 0x1C	; 28
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <clear_display+0xc>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <clear_display+0x12>
     9c2:	00 00       	nop
     9c4:	08 95       	ret

000009c6 <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     9ce:	8f e6       	ldi	r24, 0x6F	; 111
     9d0:	97 e1       	ldi	r25, 0x17	; 23
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <cursor_home+0xc>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <cursor_home+0x12>
     9d8:	00 00       	nop
     9da:	08 95       	ret

000009dc <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     9dc:	60 ec       	ldi	r22, 0xC0	; 192
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     9e4:	85 ed       	ldi	r24, 0xD5	; 213
     9e6:	8a 95       	dec	r24
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <line2_col1+0xa>
     9ea:	00 00       	nop
     9ec:	08 95       	ret

000009ee <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     9ee:	60 e8       	ldi	r22, 0x80	; 128
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     9f6:	85 ed       	ldi	r24, 0xD5	; 213
     9f8:	8a 95       	dec	r24
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <line1_col1+0xa>
     9fc:	00 00       	nop
     9fe:	08 95       	ret

00000a00 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     a00:	cf 93       	push	r28
     a02:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
     a04:	60 e2       	ldi	r22, 0x20	; 32
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     a0c:	85 ed       	ldi	r24, 0xD5	; 213
     a0e:	8a 95       	dec	r24
     a10:	f1 f7       	brne	.-4      	; 0xa0e <fill_spaces+0xe>
     a12:	00 00       	nop
     a14:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     a16:	b1 f7       	brne	.-20     	; 0xa04 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
     a1c:	68 2f       	mov	r22, r24
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <send_lcd>

00000a24 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	f8 01       	movw	r30, r16
     a34:	e4 0f       	add	r30, r20
     a36:	f5 1f       	adc	r31, r21
     a38:	60 81       	ld	r22, Z
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     a40:	85 ed       	ldi	r24, 0xD5	; 213
     a42:	8a 95       	dec	r24
     a44:	f1 f7       	brne	.-4      	; 0xa42 <string2lcd+0x1e>
     a46:	00 00       	nop
     a48:	cf 5f       	subi	r28, 0xFF	; 255
     a4a:	4c 2f       	mov	r20, r28
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	f8 01       	movw	r30, r16
     a50:	01 90       	ld	r0, Z+
     a52:	00 20       	and	r0, r0
     a54:	e9 f7       	brne	.-6      	; 0xa50 <string2lcd+0x2c>
     a56:	9f 01       	movw	r18, r30
     a58:	20 1b       	sub	r18, r16
     a5a:	31 0b       	sbc	r19, r17
     a5c:	22 50       	subi	r18, 0x02	; 2
     a5e:	31 09       	sbc	r19, r1
     a60:	24 17       	cp	r18, r20
     a62:	35 07       	cpc	r19, r21
     a64:	30 f7       	brcc	.-52     	; 0xa32 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	99 ef       	ldi	r25, 0xF9	; 249
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <lcd_init+0x4>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <lcd_init+0xa>
     a78:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     a7a:	88 e0       	ldi	r24, 0x08	; 8
     a7c:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
     a80:	60 e3       	ldi	r22, 0x30	; 48
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     a88:	8f e5       	ldi	r24, 0x5F	; 95
     a8a:	9d e6       	ldi	r25, 0x6D	; 109
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <lcd_init+0x1e>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <lcd_init+0x24>
     a92:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     a94:	60 e3       	ldi	r22, 0x30	; 48
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     a9c:	8f e5       	ldi	r24, 0x5F	; 95
     a9e:	9d e6       	ldi	r25, 0x6D	; 109
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <lcd_init+0x32>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <lcd_init+0x38>
     aa6:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
     aa8:	60 e3       	ldi	r22, 0x30	; 48
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     ab0:	8f e5       	ldi	r24, 0x5F	; 95
     ab2:	9d e6       	ldi	r25, 0x6D	; 109
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <lcd_init+0x46>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <lcd_init+0x4c>
     aba:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
     abc:	68 e3       	ldi	r22, 0x38	; 56
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     ac4:	8f e1       	ldi	r24, 0x1F	; 31
     ac6:	9e e4       	ldi	r25, 0x4E	; 78
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <lcd_init+0x5a>
     acc:	00 c0       	rjmp	.+0      	; 0xace <lcd_init+0x60>
     ace:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
     ad0:	68 e0       	ldi	r22, 0x08	; 8
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     ad8:	8f e1       	ldi	r24, 0x1F	; 31
     ada:	9e e4       	ldi	r25, 0x4E	; 78
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <lcd_init+0x6e>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <lcd_init+0x74>
     ae2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     aec:	8f e1       	ldi	r24, 0x1F	; 31
     aee:	9e e4       	ldi	r25, 0x4E	; 78
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <lcd_init+0x82>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <lcd_init+0x88>
     af6:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
     af8:	66 e0       	ldi	r22, 0x06	; 6
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     b00:	8f e1       	ldi	r24, 0x1F	; 31
     b02:	9e e4       	ldi	r25, 0x4E	; 78
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <lcd_init+0x96>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <lcd_init+0x9c>
     b0a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
     b0c:	6c e0       	ldi	r22, 0x0C	; 12
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     b14:	8f e1       	ldi	r24, 0x1F	; 31
     b16:	9e e4       	ldi	r25, 0x4E	; 78
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <lcd_init+0xaa>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <lcd_init+0xb0>
     b1e:	00 00       	nop
     b20:	08 95       	ret

00000b22 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	69 97       	sbiw	r28, 0x19	; 25
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	f4 2e       	mov	r15, r20
     b4c:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     b4e:	00 23       	and	r16, r16
     b50:	59 f0       	breq	.+22     	; 0xb68 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
     b52:	4b 01       	movw	r8, r22
     b54:	5c 01       	movw	r10, r24
     b56:	88 24       	eor	r8, r8
     b58:	b7 fc       	sbrc	r11, 7
     b5a:	83 94       	inc	r8
     b5c:	99 24       	eor	r9, r9
     b5e:	aa 24       	eor	r10, r10
     b60:	bb 24       	eor	r11, r11
     b62:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
     b64:	97 fd       	sbrc	r25, 7
     b66:	8f c0       	rjmp	.+286    	; 0xc86 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     b68:	11 23       	and	r17, r17
     b6a:	09 f4       	brne	.+2      	; 0xb6e <lcd_int32+0x4c>
     b6c:	84 c0       	rjmp	.+264    	; 0xc76 <lcd_int32+0x154>
     b6e:	9e 01       	movw	r18, r28
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	69 01       	movw	r12, r18
     b76:	59 01       	movw	r10, r18
     b78:	88 24       	eor	r8, r8
     b7a:	8a 94       	dec	r8
     b7c:	81 0e       	add	r8, r17
     b7e:	91 2c       	mov	r9, r1
     b80:	3f ef       	ldi	r19, 0xFF	; 255
     b82:	83 1a       	sub	r8, r19
     b84:	93 0a       	sbc	r9, r19
     b86:	8c 0c       	add	r8, r12
     b88:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     b8a:	2a e0       	ldi	r18, 0x0A	; 10
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodsi4>
     b96:	e6 2f       	mov	r30, r22
     b98:	2a 8b       	std	Y+18, r18	; 0x12
     b9a:	3b 8b       	std	Y+19, r19	; 0x13
     b9c:	4c 8b       	std	Y+20, r20	; 0x14
     b9e:	5d 8b       	std	Y+21, r21	; 0x15
     ba0:	6a 89       	ldd	r22, Y+18	; 0x12
     ba2:	7b 89       	ldd	r23, Y+19	; 0x13
     ba4:	8c 89       	ldd	r24, Y+20	; 0x14
     ba6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     ba8:	20 e3       	ldi	r18, 0x30	; 48
     baa:	2e 0f       	add	r18, r30
     bac:	f5 01       	movw	r30, r10
     bae:	21 93       	st	Z+, r18
     bb0:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     bb2:	e8 15       	cp	r30, r8
     bb4:	f9 05       	cpc	r31, r9
     bb6:	49 f7       	brne	.-46     	; 0xb8a <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     bb8:	bb 24       	eor	r11, r11
     bba:	b3 94       	inc	r11
     bbc:	b1 0e       	add	r11, r17
     bbe:	f6 01       	movw	r30, r12
     bc0:	e1 0f       	add	r30, r17
     bc2:	f1 1d       	adc	r31, r1
     bc4:	2e e2       	ldi	r18, 0x2E	; 46
     bc6:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     bc8:	2a e0       	ldi	r18, 0x0A	; 10
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodsi4>
     bd4:	e6 2f       	mov	r30, r22
     bd6:	2a 8b       	std	Y+18, r18	; 0x12
     bd8:	3b 8b       	std	Y+19, r19	; 0x13
     bda:	4c 8b       	std	Y+20, r20	; 0x14
     bdc:	5d 8b       	std	Y+21, r21	; 0x15
     bde:	6e 8b       	std	Y+22, r22	; 0x16
     be0:	7f 8b       	std	Y+23, r23	; 0x17
     be2:	88 8f       	std	Y+24, r24	; 0x18
     be4:	99 8f       	std	Y+25, r25	; 0x19
     be6:	6a 89       	ldd	r22, Y+18	; 0x12
     be8:	7b 89       	ldd	r23, Y+19	; 0x13
     bea:	8c 89       	ldd	r24, Y+20	; 0x14
     bec:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     bee:	11 e0       	ldi	r17, 0x01	; 1
     bf0:	1b 0d       	add	r17, r11
     bf2:	d6 01       	movw	r26, r12
     bf4:	ab 0d       	add	r26, r11
     bf6:	b1 1d       	adc	r27, r1
     bf8:	e0 5d       	subi	r30, 0xD0	; 208
     bfa:	ec 93       	st	X, r30
     bfc:	b1 2e       	mov	r11, r17
        }while(qr.quot);
     bfe:	61 15       	cp	r22, r1
     c00:	71 05       	cpc	r23, r1
     c02:	81 05       	cpc	r24, r1
     c04:	91 05       	cpc	r25, r1
     c06:	01 f7       	brne	.-64     	; 0xbc8 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
     c08:	ff 20       	and	r15, r15
     c0a:	61 f0       	breq	.+24     	; 0xc24 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     c0c:	e1 10       	cpse	r14, r1
     c0e:	39 c0       	rjmp	.+114    	; 0xc82 <lcd_int32+0x160>
     c10:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     c12:	1f 15       	cp	r17, r15
     c14:	38 f4       	brcc	.+14     	; 0xc24 <lcd_int32+0x102>
     c16:	f6 01       	movw	r30, r12
     c18:	e1 0f       	add	r30, r17
     c1a:	f1 1d       	adc	r31, r1
     c1c:	80 83       	st	Z, r24
     c1e:	1f 5f       	subi	r17, 0xFF	; 255
     c20:	1f 11       	cpse	r17, r15
     c22:	f9 cf       	rjmp	.-14     	; 0xc16 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     c24:	00 23       	and	r16, r16
     c26:	31 f0       	breq	.+12     	; 0xc34 <lcd_int32+0x112>
     c28:	f6 01       	movw	r30, r12
     c2a:	e1 0f       	add	r30, r17
     c2c:	f1 1d       	adc	r31, r1
     c2e:	8d e2       	ldi	r24, 0x2D	; 45
     c30:	80 83       	st	Z, r24
     c32:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     c34:	11 50       	subi	r17, 0x01	; 1
     c36:	f6 01       	movw	r30, r12
     c38:	e1 0f       	add	r30, r17
     c3a:	f1 1d       	adc	r31, r1
     c3c:	60 81       	ld	r22, Z
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c44:	35 ed       	ldi	r19, 0xD5	; 213
     c46:	3a 95       	dec	r19
     c48:	f1 f7       	brne	.-4      	; 0xc46 <lcd_int32+0x124>
     c4a:	00 00       	nop
     c4c:	11 11       	cpse	r17, r1
     c4e:	f2 cf       	rjmp	.-28     	; 0xc34 <lcd_int32+0x112>

}
     c50:	69 96       	adiw	r28, 0x19	; 25
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	bf 90       	pop	r11
     c6e:	af 90       	pop	r10
     c70:	9f 90       	pop	r9
     c72:	8f 90       	pop	r8
     c74:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     c76:	b1 2c       	mov	r11, r1
     c78:	9e 01       	movw	r18, r28
     c7a:	2f 5f       	subi	r18, 0xFF	; 255
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	69 01       	movw	r12, r18
     c80:	a3 cf       	rjmp	.-186    	; 0xbc8 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     c82:	80 e3       	ldi	r24, 0x30	; 48
     c84:	c6 cf       	rjmp	.-116    	; 0xc12 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     c86:	90 95       	com	r25
     c88:	80 95       	com	r24
     c8a:	70 95       	com	r23
     c8c:	61 95       	neg	r22
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	8f 4f       	sbci	r24, 0xFF	; 255
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	69 cf       	rjmp	.-302    	; 0xb68 <lcd_int32+0x46>

00000c96 <lcd_int16>:
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	61 97       	sbiw	r28, 0x11	; 17
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	66 2e       	mov	r6, r22
     cc6:	14 2f       	mov	r17, r20
     cc8:	59 2e       	mov	r5, r25
     cca:	55 1c       	adc	r5, r5
     ccc:	55 24       	eor	r5, r5
     cce:	55 1c       	adc	r5, r5
     cd0:	75 2c       	mov	r7, r5
     cd2:	a5 2c       	mov	r10, r5
     cd4:	b1 2c       	mov	r11, r1
     cd6:	22 27       	eor	r18, r18
     cd8:	33 27       	eor	r19, r19
     cda:	2a 19       	sub	r18, r10
     cdc:	3b 09       	sbc	r19, r11
     cde:	82 27       	eor	r24, r18
     ce0:	93 27       	eor	r25, r19
     ce2:	9c 01       	movw	r18, r24
     ce4:	2a 0d       	add	r18, r10
     ce6:	3b 1d       	adc	r19, r11
     ce8:	44 23       	and	r20, r20
     cea:	09 f4       	brne	.+2      	; 0xcee <lcd_int16+0x58>
     cec:	90 c0       	rjmp	.+288    	; 0xe0e <lcd_int16+0x178>
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	7c 01       	movw	r14, r24
     cf4:	6c 01       	movw	r12, r24
     cf6:	88 24       	eor	r8, r8
     cf8:	8a 94       	dec	r8
     cfa:	84 0e       	add	r8, r20
     cfc:	91 2c       	mov	r9, r1
     cfe:	9f ef       	ldi	r25, 0xFF	; 255
     d00:	89 1a       	sub	r8, r25
     d02:	99 0a       	sbc	r9, r25
     d04:	8e 0c       	add	r8, r14
     d06:	9f 1c       	adc	r9, r15
     d08:	6a e0       	ldi	r22, 0x0A	; 10
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	c9 01       	movw	r24, r18
     d0e:	0e 94 2f 08 	call	0x105e	; 0x105e <__divmodhi4>
     d12:	46 2f       	mov	r20, r22
     d14:	24 2f       	mov	r18, r20
     d16:	37 2f       	mov	r19, r23
     d18:	80 5d       	subi	r24, 0xD0	; 208
     d1a:	f6 01       	movw	r30, r12
     d1c:	81 93       	st	Z+, r24
     d1e:	6f 01       	movw	r12, r30
     d20:	e8 15       	cp	r30, r8
     d22:	f9 05       	cpc	r31, r9
     d24:	89 f7       	brne	.-30     	; 0xd08 <lcd_int16+0x72>
     d26:	dd 24       	eor	r13, r13
     d28:	d3 94       	inc	r13
     d2a:	d1 0e       	add	r13, r17
     d2c:	f7 01       	movw	r30, r14
     d2e:	e1 0f       	add	r30, r17
     d30:	f1 1d       	adc	r31, r1
     d32:	8e e2       	ldi	r24, 0x2E	; 46
     d34:	80 83       	st	Z, r24
     d36:	6a e0       	ldi	r22, 0x0A	; 10
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	c9 01       	movw	r24, r18
     d3c:	0e 94 2f 08 	call	0x105e	; 0x105e <__divmodhi4>
     d40:	46 2f       	mov	r20, r22
     d42:	24 2f       	mov	r18, r20
     d44:	37 2f       	mov	r19, r23
     d46:	11 e0       	ldi	r17, 0x01	; 1
     d48:	1d 0d       	add	r17, r13
     d4a:	f7 01       	movw	r30, r14
     d4c:	ed 0d       	add	r30, r13
     d4e:	f1 1d       	adc	r31, r1
     d50:	80 5d       	subi	r24, 0xD0	; 208
     d52:	80 83       	st	Z, r24
     d54:	d1 2e       	mov	r13, r17
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	69 f7       	brne	.-38     	; 0xd36 <lcd_int16+0xa0>
     d5c:	01 11       	cpse	r16, r1
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <lcd_int16+0xf4>
     d60:	55 20       	and	r5, r5
     d62:	39 f0       	breq	.+14     	; 0xd72 <lcd_int16+0xdc>
     d64:	11 e0       	ldi	r17, 0x01	; 1
     d66:	1d 0d       	add	r17, r13
     d68:	f7 01       	movw	r30, r14
     d6a:	ed 0d       	add	r30, r13
     d6c:	f1 1d       	adc	r31, r1
     d6e:	8d e2       	ldi	r24, 0x2D	; 45
     d70:	80 83       	st	Z, r24
     d72:	66 20       	and	r6, r6
     d74:	41 f1       	breq	.+80     	; 0xdc6 <lcd_int16+0x130>
     d76:	81 2f       	mov	r24, r17
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	26 2d       	mov	r18, r6
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	82 17       	cp	r24, r18
     d80:	93 07       	cpc	r25, r19
     d82:	0c f5       	brge	.+66     	; 0xdc6 <lcd_int16+0x130>
     d84:	71 2c       	mov	r7, r1
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	0c c0       	rjmp	.+24     	; 0xda2 <lcd_int16+0x10c>
     d8a:	66 20       	and	r6, r6
     d8c:	a1 f0       	breq	.+40     	; 0xdb6 <lcd_int16+0x120>
     d8e:	81 2f       	mov	r24, r17
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	26 2d       	mov	r18, r6
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	2a 19       	sub	r18, r10
     d98:	3b 09       	sbc	r19, r11
     d9a:	82 17       	cp	r24, r18
     d9c:	93 07       	cpc	r25, r19
     d9e:	5c f4       	brge	.+22     	; 0xdb6 <lcd_int16+0x120>
     da0:	40 e3       	ldi	r20, 0x30	; 48
     da2:	1f 5f       	subi	r17, 0xFF	; 255
     da4:	f7 01       	movw	r30, r14
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	40 83       	st	Z, r20
     dac:	81 2f       	mov	r24, r17
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	b4 f3       	brlt	.-20     	; 0xda2 <lcd_int16+0x10c>
     db6:	77 20       	and	r7, r7
     db8:	31 f0       	breq	.+12     	; 0xdc6 <lcd_int16+0x130>
     dba:	f7 01       	movw	r30, r14
     dbc:	e1 0f       	add	r30, r17
     dbe:	f1 1d       	adc	r31, r1
     dc0:	8d e2       	ldi	r24, 0x2D	; 45
     dc2:	80 83       	st	Z, r24
     dc4:	1f 5f       	subi	r17, 0xFF	; 255
     dc6:	11 50       	subi	r17, 0x01	; 1
     dc8:	f7 01       	movw	r30, r14
     dca:	e1 0f       	add	r30, r17
     dcc:	f1 1d       	adc	r31, r1
     dce:	60 81       	ld	r22, Z
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <send_lcd>
     dd6:	95 ed       	ldi	r25, 0xD5	; 213
     dd8:	9a 95       	dec	r25
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <lcd_int16+0x142>
     ddc:	00 00       	nop
     dde:	11 11       	cpse	r17, r1
     de0:	f2 cf       	rjmp	.-28     	; 0xdc6 <lcd_int16+0x130>
     de2:	61 96       	adiw	r28, 0x11	; 17
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	08 95       	ret
     e0e:	d1 2c       	mov	r13, r1
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	7c 01       	movw	r14, r24
     e16:	8f cf       	rjmp	.-226    	; 0xd36 <lcd_int16+0xa0>

00000e18 <main>:
		}
	}
}
int main()
{
  	spi_init();
     e18:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_init>
}

void TIM2_PWM_init(void)
{
    /* Timer clock = I/O clock */    
    TCCR2 = 0x69; 
     e1c:	89 e6       	ldi	r24, 0x69	; 105
     e1e:	85 bd       	out	0x25, r24	; 37
    /* Set the compare value to control duty cycle */    
    OCR2  = 0x80;    
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	83 bd       	out	0x23, r24	; 35
    /* Set OC2A pin as output */
    DDRB |= 0b10000000;
     e24:	bf 9a       	sbi	0x17, 7	; 23
int main()
{
  	spi_init();
	TIM2_PWM_init(); 
	//ADC_init();
	TIM0_RTC_init();
     e26:	0e 94 15 01 	call	0x22a	; 0x22a <TIM0_RTC_init>
//                     Timer 1 initialization
//***********************************************************************

void TIM1_init()
{
  	TCCR1A = 0x00;                  //Normal mode operation
     e2a:	1f bc       	out	0x2f, r1	; 47
  	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS11);   //use OCR1A as source for TOP, use clk/1024
     e2c:	8b e0       	ldi	r24, 0x0B	; 11
     e2e:	8e bd       	out	0x2e, r24	; 46
  	TCCR1C = 0x00;                          //no forced compare 
     e30:	10 92 7a 00 	sts	0x007A, r1
  	OCR1A = 0x0269; //top value
     e34:	89 e6       	ldi	r24, 0x69	; 105
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9b bd       	out	0x2b, r25	; 43
     e3a:	8a bd       	out	0x2a, r24	; 42
  	TIMSK |= (1<<OCIE1A); //enable interrupt
     e3c:	87 b7       	in	r24, 0x37	; 55
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	87 bf       	out	0x37, r24	; 55

  	DDRD |= (1<<PORTD2); // Port D bit 2 output
     e42:	8a 9a       	sbi	0x11, 2	; 17
  	PORTD |= (0<<PD2); //high state
     e44:	82 b3       	in	r24, 0x12	; 18
     e46:	82 bb       	out	0x12, r24	; 18
    DDRB |= 0b10000000;
}

void TIM3_PWM_init()
{
	DDRE |= (1<<PE3);
     e48:	13 9a       	sbi	0x02, 3	; 2
	OCR3A = 0x1FF; //50% duty cycle
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	90 93 87 00 	sts	0x0087, r25
     e52:	80 93 86 00 	sts	0x0086, r24
	TCCR3A = (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31) | (1<<WGM30); //Fast PWM 10bit 
     e56:	83 ec       	ldi	r24, 0xC3	; 195
     e58:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = (1<<WGM32) | (1<<CS30); //Set OC3A on compare match
     e5c:	89 e0       	ldi	r24, 0x09	; 9
     e5e:	80 93 8a 00 	sts	0x008A, r24
	TIM2_PWM_init(); 
	//ADC_init();
	TIM0_RTC_init();
	TIM1_init();
	TIM3_PWM_init();
	lcd_init();
     e62:	0e 94 37 05 	call	0xa6e	; 0xa6e <lcd_init>
	clear_display();
     e66:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <clear_display>
//This function sends data via the MOSI port of the SPI 
//The data is sent to the bargraph
void spi_write(uint8_t display_count)
{

        SPDR = display_count;//send display_count to the display 
     e6a:	1f b8       	out	0x0f, r1	; 15
        while (bit_is_clear(SPSR,SPIF)){} //spin till SPI data has been sent 
     e6c:	77 9b       	sbis	0x0e, 7	; 14
     e6e:	fe cf       	rjmp	.-4      	; 0xe6c <main+0x54>

        PORTB |= 0b00000001; //Rising edge on PORTB0 (SRCLK of the  bargraph)
     e70:	c0 9a       	sbi	0x18, 0	; 24
        PORTB &= 0b11111110;  //falling edge on PORTB0 (SRCLK of the bargraph)
     e72:	c0 98       	cbi	0x18, 0	; 24
}

void TIM3_set_PWM(int duty_cycle)
{
	uint16_t conversion = (duty_cycle*10.23); // duty*1023/100 = duty*10.23 
	OCR3A = 1023 - ((duty_cycle*1023)/100); //set the duty cycle value
     e74:	85 ef       	ldi	r24, 0xF5	; 245
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	90 93 87 00 	sts	0x0087, r25
     e7c:	80 93 86 00 	sts	0x0086, r24
}

void ADC_init()
{
  //Initalize ADC and its ports
  	DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
     e80:	80 91 61 00 	lds	r24, 0x0061
     e84:	8f 77       	andi	r24, 0x7F	; 127
     e86:	80 93 61 00 	sts	0x0061, r24
  	PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     e8a:	80 91 62 00 	lds	r24, 0x0062
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	80 93 62 00 	sts	0x0062, r24
  	ADMUX = 0x47; //writes 00111 to ADMUX (4:0) for single-ended, input PORTF bit 7, right adjusted, 10 bits
     e94:	87 e4       	ldi	r24, 0x47	; 71
     e96:	87 b9       	out	0x07, r24	; 7
  	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //ADC enabled, don't start yet, single shot mode 
     e98:	86 b1       	in	r24, 0x06	; 6
     e9a:	8f 68       	ori	r24, 0x8F	; 143
     e9c:	86 b9       	out	0x06, r24	; 6
	clear_display();
	spi_write(0x00);
        TIM3_set_PWM(40);
	ADC_init();

	ADCSRA |= (1<<ADSC); //Start next ADC conversion
     e9e:	36 9a       	sbi	0x06, 6	; 6

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
     ea0:	aa 24       	eor	r10, r10
     ea2:	aa 94       	dec	r10
                }

		if(chk_buttons(0)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
     ea4:	99 24       	eor	r9, r9
     ea6:	93 94       	inc	r9

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
     ea8:	bb 24       	eor	r11, r11
     eaa:	ba 94       	dec	r11
                }

		if(chk_buttons(0)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
     eac:	88 24       	eor	r8, r8
     eae:	83 94       	inc	r8
     eb0:	5e c0       	rjmp	.+188    	; 0xf6e <main+0x156>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eb2:	8f e9       	ldi	r24, 0x9F	; 159
     eb4:	9f e0       	ldi	r25, 0x0F	; 15
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <main+0x9e>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <main+0xa4>
     ebc:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     ebe:	29 b3       	in	r18, 0x19	; 25
     ec0:	80 91 29 01 	lds	r24, 0x0129
     ec4:	90 91 2a 01 	lds	r25, 0x012A
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	90 6e       	ori	r25, 0xE0	; 224
     ece:	21 fb       	bst	r18, 1
     ed0:	00 27       	eor	r16, r16
     ed2:	00 f9       	bld	r16, 0
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	80 2b       	or	r24, r16
     ed8:	91 2b       	or	r25, r17
     eda:	90 93 2a 01 	sts	0x012A, r25
     ede:	80 93 29 01 	sts	0x0129, r24
  	if (state[PinNumber] == 0xF000) return 1;
     ee2:	81 15       	cp	r24, r1
     ee4:	90 4f       	sbci	r25, 0xF0	; 240
     ee6:	09 f4       	brne	.+2      	; 0xeea <main+0xd2>
     ee8:	87 c0       	rjmp	.+270    	; 0xff8 <main+0x1e0>
     eea:	8f e9       	ldi	r24, 0x9F	; 159
     eec:	9f e0       	ldi	r25, 0x0F	; 15
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0xd6>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <main+0xdc>
     ef4:	00 00       	nop
		}
    
 		if(chk_buttons(1)) //Button 1 controls the alarm setting 
			set_alarm_ena = !set_alarm_ena; 

                if(alarm_set)
     ef6:	80 91 1d 01 	lds	r24, 0x011D
     efa:	81 11       	cpse	r24, r1
     efc:	87 c0       	rjmp	.+270    	; 0x100c <main+0x1f4>
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     efe:	29 b3       	in	r18, 0x19	; 25
     f00:	80 91 2b 01 	lds	r24, 0x012B
     f04:	90 91 2c 01 	lds	r25, 0x012C
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	90 6e       	ori	r25, 0xE0	; 224
     f0e:	22 fb       	bst	r18, 2
     f10:	ee 24       	eor	r14, r14
     f12:	e0 f8       	bld	r14, 0
     f14:	f1 2c       	mov	r15, r1
     f16:	8e 29       	or	r24, r14
     f18:	9f 29       	or	r25, r15
     f1a:	90 93 2c 01 	sts	0x012C, r25
     f1e:	80 93 2b 01 	sts	0x012B, r24
  	if (state[PinNumber] == 0xF000) return 1;
     f22:	81 15       	cp	r24, r1
     f24:	90 4f       	sbci	r25, 0xF0	; 240
     f26:	09 f4       	brne	.+2      	; 0xf2a <main+0x112>
     f28:	60 c0       	rjmp	.+192    	; 0xfea <main+0x1d2>
     f2a:	8f e9       	ldi	r24, 0x9F	; 159
     f2c:	9f e0       	ldi	r25, 0x0F	; 15
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <main+0x116>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <main+0x11c>
     f34:	00 00       	nop
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     f36:	29 b3       	in	r18, 0x19	; 25
     f38:	80 91 2d 01 	lds	r24, 0x012D
     f3c:	90 91 2e 01 	lds	r25, 0x012E
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	90 6e       	ori	r25, 0xE0	; 224
     f46:	23 fb       	bst	r18, 3
     f48:	cc 24       	eor	r12, r12
     f4a:	c0 f8       	bld	r12, 0
     f4c:	d1 2c       	mov	r13, r1
     f4e:	8c 29       	or	r24, r12
     f50:	9d 29       	or	r25, r13
     f52:	90 93 2e 01 	sts	0x012E, r25
     f56:	80 93 2d 01 	sts	0x012D, r24
  	if (state[PinNumber] == 0xF000) return 1;
     f5a:	81 15       	cp	r24, r1
     f5c:	90 4f       	sbci	r25, 0xF0	; 240
     f5e:	09 f4       	brne	.+2      	; 0xf62 <main+0x14a>
     f60:	63 c0       	rjmp	.+198    	; 0x1028 <main+0x210>
     f62:	8f e9       	ldi	r24, 0x9F	; 159
     f64:	9f e0       	ldi	r25, 0x0F	; 15
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <main+0x14e>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <main+0x154>
     f6c:	00 00       	nop

//void InitLEDdisplay()
//This function initializes the IO to use the 4Digit LED display
void InitLEDdisplay()
{
  	DDRA = 0xFF; //Set PORTA to all output
     f6e:	ba ba       	out	0x1a, r11	; 26
  	DDRB |= 0XF0; //Set PORTB pins 4 to 7 to output
     f70:	87 b3       	in	r24, 0x17	; 23
     f72:	80 6f       	ori	r24, 0xF0	; 240
     f74:	87 bb       	out	0x17, r24	; 23
  	asm("nop"); //IO Synchronization delay
     f76:	00 00       	nop
  	asm("nop"); //IO Synchronization delay
     f78:	00 00       	nop
  	PORTB |= 0b01100000; //Set PB5 and PB6 to 1 (no digit selected on Display)
     f7a:	88 b3       	in	r24, 0x18	; 24
     f7c:	80 66       	ori	r24, 0x60	; 96
     f7e:	88 bb       	out	0x18, r24	; 24
  	PORTB &= 0b01101111; //Set PB4 and PB7 to 0 (transistor saturated) 
     f80:	88 b3       	in	r24, 0x18	; 24
     f82:	8f 76       	andi	r24, 0x6F	; 111
     f84:	88 bb       	out	0x18, r24	; 24
	ADCSRA |= (1<<ADSC); //Start next ADC conversion

	while(1)
	{	
		InitLEDdisplay();
		SeperateDigits();
     f86:	0e 94 c7 01 	call	0x38e	; 0x38e <SeperateDigits>

//void InitPushButtons()
//This function initializes the IO to read the state of the push buttons
void InitPushButtons()
{
        DDRA = 0x00; //Set all PortA to input
     f8a:	1a ba       	out	0x1a, r1	; 26
        DDRB |= 0xF0; //Set PortB pin fom 4 to 7 as output
     f8c:	87 b3       	in	r24, 0x17	; 23
     f8e:	80 6f       	ori	r24, 0xF0	; 240
     f90:	87 bb       	out	0x17, r24	; 23
        asm("nop"); //IO Synchronization necessary delay
     f92:	00 00       	nop
        asm("nop");
     f94:	00 00       	nop
        PORTA = 0xFF; //Pull up resistor on PORTA input pins
     f96:	ab ba       	out	0x1b, r10	; 27
        PORTB |= (1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6) | (1<<PORTB7); //Enable Tri-State buffer and cutoff Transistor
     f98:	88 b3       	in	r24, 0x18	; 24
     f9a:	80 6f       	ori	r24, 0xF0	; 240
     f9c:	88 bb       	out	0x18, r24	; 24
		SeperateDigits();
		InitPushButtons();
		//asm("nop");
		//asm("nop");

                if(set_clock_ena == 1)
     f9e:	80 91 1f 01 	lds	r24, 0x011F
     fa2:	81 11       	cpse	r24, r1
     fa4:	39 c0       	rjmp	.+114    	; 0x1018 <main+0x200>
                {       Set_Clock();
                        //spi_write(0x01);
                }

                if(set_alarm_ena == 1)
     fa6:	80 91 1e 01 	lds	r24, 0x011E
     faa:	81 11       	cpse	r24, r1
     fac:	32 c0       	rjmp	.+100    	; 0x1012 <main+0x1fa>
//Checks the state of the button number passed to it. 
//It calls the debounce switch function for each pin of port A
int chk_buttons(uint8_t PinNumber)
{
  	static uint16_t state[8] ={0}; //holds present state
  	state[PinNumber] = (state[PinNumber] << 1) | (! bit_is_clear(PINA, PinNumber)) | 0xE000;
     fae:	29 b3       	in	r18, 0x19	; 25
     fb0:	80 91 27 01 	lds	r24, 0x0127
     fb4:	90 91 28 01 	lds	r25, 0x0128
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	90 6e       	ori	r25, 0xE0	; 224
     fbe:	21 70       	andi	r18, 0x01	; 1
     fc0:	c2 2f       	mov	r28, r18
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	d2 2f       	mov	r29, r18
     fc6:	8c 2b       	or	r24, r28
     fc8:	9d 2b       	or	r25, r29
     fca:	90 93 28 01 	sts	0x0128, r25
     fce:	80 93 27 01 	sts	0x0127, r24
  	if (state[PinNumber] == 0xF000) return 1;
     fd2:	81 15       	cp	r24, r1
     fd4:	90 4f       	sbci	r25, 0xF0	; 240
     fd6:	09 f0       	breq	.+2      	; 0xfda <main+0x1c2>
     fd8:	6c cf       	rjmp	.-296    	; 0xeb2 <main+0x9a>
                {       Set_Alarm();
                        //spi_write(0x02);
                }

		if(chk_buttons(0)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
     fda:	80 91 1f 01 	lds	r24, 0x011F
     fde:	81 11       	cpse	r24, r1
     fe0:	1e c0       	rjmp	.+60     	; 0x101e <main+0x206>
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
     fe2:	89 25       	eor	r24, r9
     fe4:	80 93 1f 01 	sts	0x011F, r24
     fe8:	6a cf       	rjmp	.-300    	; 0xebe <main+0xa6>

                if(alarm_set)
                        Alarm();

		if(chk_buttons(2))
		{	alarm_set = 0; //Button 2 pushed, stop completely the alarm
     fea:	10 92 1d 01 	sts	0x011D, r1
			trigger_alarm = 0; 
     fee:	10 92 1c 01 	sts	0x011C, r1
			//spi_write(0);
			clear_display();
     ff2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <clear_display>
     ff6:	9f cf       	rjmp	.-194    	; 0xf36 <main+0x11e>
				TIM0_RTC_init();
			set_clock_ena = !set_clock_ena; //!set_clock_ena;
		}
    
 		if(chk_buttons(1)) //Button 1 controls the alarm setting 
			set_alarm_ena = !set_alarm_ena; 
     ff8:	80 91 1e 01 	lds	r24, 0x011E
     ffc:	89 25       	eor	r24, r9
     ffe:	80 93 1e 01 	sts	0x011E, r24

                if(alarm_set)
    1002:	80 91 1d 01 	lds	r24, 0x011D
    1006:	88 23       	and	r24, r24
    1008:	09 f4       	brne	.+2      	; 0x100c <main+0x1f4>
    100a:	79 cf       	rjmp	.-270    	; 0xefe <main+0xe6>
                        Alarm();
    100c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Alarm>
    1010:	76 cf       	rjmp	.-276    	; 0xefe <main+0xe6>
                {       Set_Clock();
                        //spi_write(0x01);
                }

                if(set_alarm_ena == 1)
                {       Set_Alarm();
    1012:	0e 94 b2 03 	call	0x764	; 0x764 <Set_Alarm>
    1016:	cb cf       	rjmp	.-106    	; 0xfae <main+0x196>
		InitPushButtons();
		//asm("nop");
		//asm("nop");

                if(set_clock_ena == 1)
                {       Set_Clock();
    1018:	0e 94 93 03 	call	0x726	; 0x726 <Set_Clock>
    101c:	c4 cf       	rjmp	.-120    	; 0xfa6 <main+0x18e>
                        //spi_write(0x02);
                }

		if(chk_buttons(0)) //Button 0 controls the clock setting
		{	if(set_clock_ena == 1)
				TIM0_RTC_init();
    101e:	0e 94 15 01 	call	0x22a	; 0x22a <TIM0_RTC_init>
    1022:	80 91 1f 01 	lds	r24, 0x011F
    1026:	dd cf       	rjmp	.-70     	; 0xfe2 <main+0x1ca>
			trigger_alarm = 0; 
			//spi_write(0);
			clear_display();
		}	
		if(chk_buttons(3))
		{	snooze = 1;	
    1028:	80 92 1b 01 	sts	0x011B, r8
			trigger_alarm = 0;
    102c:	10 92 1c 01 	sts	0x011C, r1
			//spi_write(1);
			clear_display();	
    1030:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <clear_display>
    1034:	9c cf       	rjmp	.-200    	; 0xf6e <main+0x156>

00001036 <__udivmodhi4>:
    1036:	aa 1b       	sub	r26, r26
    1038:	bb 1b       	sub	r27, r27
    103a:	51 e1       	ldi	r21, 0x11	; 17
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__udivmodhi4_ep>

0000103e <__udivmodhi4_loop>:
    103e:	aa 1f       	adc	r26, r26
    1040:	bb 1f       	adc	r27, r27
    1042:	a6 17       	cp	r26, r22
    1044:	b7 07       	cpc	r27, r23
    1046:	10 f0       	brcs	.+4      	; 0x104c <__udivmodhi4_ep>
    1048:	a6 1b       	sub	r26, r22
    104a:	b7 0b       	sbc	r27, r23

0000104c <__udivmodhi4_ep>:
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	5a 95       	dec	r21
    1052:	a9 f7       	brne	.-22     	; 0x103e <__udivmodhi4_loop>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	08 95       	ret

0000105e <__divmodhi4>:
    105e:	97 fb       	bst	r25, 7
    1060:	07 2e       	mov	r0, r23
    1062:	16 f4       	brtc	.+4      	; 0x1068 <__divmodhi4+0xa>
    1064:	00 94       	com	r0
    1066:	07 d0       	rcall	.+14     	; 0x1076 <__divmodhi4_neg1>
    1068:	77 fd       	sbrc	r23, 7
    106a:	09 d0       	rcall	.+18     	; 0x107e <__divmodhi4_neg2>
    106c:	0e 94 1b 08 	call	0x1036	; 0x1036 <__udivmodhi4>
    1070:	07 fc       	sbrc	r0, 7
    1072:	05 d0       	rcall	.+10     	; 0x107e <__divmodhi4_neg2>
    1074:	3e f4       	brtc	.+14     	; 0x1084 <__divmodhi4_exit>

00001076 <__divmodhi4_neg1>:
    1076:	90 95       	com	r25
    1078:	81 95       	neg	r24
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__divmodhi4_neg2>:
    107e:	70 95       	com	r23
    1080:	61 95       	neg	r22
    1082:	7f 4f       	sbci	r23, 0xFF	; 255

00001084 <__divmodhi4_exit>:
    1084:	08 95       	ret

00001086 <__divmodsi4>:
    1086:	05 2e       	mov	r0, r21
    1088:	97 fb       	bst	r25, 7
    108a:	1e f4       	brtc	.+6      	; 0x1092 <__divmodsi4+0xc>
    108c:	00 94       	com	r0
    108e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__negsi2>
    1092:	57 fd       	sbrc	r21, 7
    1094:	07 d0       	rcall	.+14     	; 0x10a4 <__divmodsi4_neg2>
    1096:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__udivmodsi4>
    109a:	07 fc       	sbrc	r0, 7
    109c:	03 d0       	rcall	.+6      	; 0x10a4 <__divmodsi4_neg2>
    109e:	4e f4       	brtc	.+18     	; 0x10b2 <__divmodsi4_exit>
    10a0:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__negsi2>

000010a4 <__divmodsi4_neg2>:
    10a4:	50 95       	com	r21
    10a6:	40 95       	com	r20
    10a8:	30 95       	com	r19
    10aa:	21 95       	neg	r18
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	4f 4f       	sbci	r20, 0xFF	; 255
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255

000010b2 <__divmodsi4_exit>:
    10b2:	08 95       	ret

000010b4 <__negsi2>:
    10b4:	90 95       	com	r25
    10b6:	80 95       	com	r24
    10b8:	70 95       	com	r23
    10ba:	61 95       	neg	r22
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__udivmodsi4>:
    10c4:	a1 e2       	ldi	r26, 0x21	; 33
    10c6:	1a 2e       	mov	r1, r26
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	fd 01       	movw	r30, r26
    10ce:	0d c0       	rjmp	.+26     	; 0x10ea <__udivmodsi4_ep>

000010d0 <__udivmodsi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	ee 1f       	adc	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	a2 17       	cp	r26, r18
    10da:	b3 07       	cpc	r27, r19
    10dc:	e4 07       	cpc	r30, r20
    10de:	f5 07       	cpc	r31, r21
    10e0:	20 f0       	brcs	.+8      	; 0x10ea <__udivmodsi4_ep>
    10e2:	a2 1b       	sub	r26, r18
    10e4:	b3 0b       	sbc	r27, r19
    10e6:	e4 0b       	sbc	r30, r20
    10e8:	f5 0b       	sbc	r31, r21

000010ea <__udivmodsi4_ep>:
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	1a 94       	dec	r1
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <__udivmodsi4_loop>
    10f6:	60 95       	com	r22
    10f8:	70 95       	com	r23
    10fa:	80 95       	com	r24
    10fc:	90 95       	com	r25
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	bd 01       	movw	r22, r26
    1104:	cf 01       	movw	r24, r30
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
